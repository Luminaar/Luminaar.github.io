<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Max K. Luminar</title><link href="https://luminar.dev/" rel="alternate"></link><link href="https://luminar.dev/feeds/all.atom.xml" rel="self"></link><id>https://luminar.dev/</id><updated>2020-01-09T13:32:47+01:00</updated><entry><title>PythonÂ tooling</title><link href="https://luminar.dev/notes/20-01-python-tooling/" rel="alternate"></link><published>2020-01-09T13:32:47+01:00</published><updated>2020-01-09T13:32:47+01:00</updated><author><name>max</name></author><id>tag:luminar.dev,2020-01-09:/notes/20-01-python-tooling/</id><summary type="html">&lt;p&gt;Overview of development tools for Python - linters, formatters and other. Short description of how we are using some of these tools in&amp;nbsp;production.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This post started as a talk for the Python Guild (a monthly gathering of Python
developers at Avast). I decided to research and put together a summary of
different tools related to Python development. Turns out there are not that&amp;nbsp;many.&lt;/p&gt;
&lt;p&gt;After I gave the talk there was a short discussion and a couple of interesting
ideas were&amp;nbsp;proposed.&lt;/p&gt;
&lt;p&gt;I realized that a more interesting topic would be how to use all these tools in
everyday work. That&amp;#8217;s why I decided to expand this post a bit. First section
contains a list of tools categorized in different categories. In the second
section I will put some thoughts on how these tools can be used in different&amp;nbsp;scenarios.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;The&amp;nbsp;tools&lt;/h1&gt;
&lt;p&gt;When I started doing research for this post I expected it to be a much more
complicated topic (same as packaging for example). Turns out there are not that
many tools - there is almost only one way to do&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;I this section I will categorize different tools into five categories, describe and
compare them. I know a lot more about tools that I use everyday but I&amp;#8217;ve
experimented with most of the others&amp;nbsp;too.&lt;/p&gt;
&lt;h2&gt;Formatters&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;&lt;span class="caps"&gt;PEP8&lt;/span&gt;&lt;/a&gt; (Style guide for Python code)
and &lt;a href="https://www.python.org/dev/peps/pep-0257/"&gt;&lt;span class="caps"&gt;PEP257&lt;/span&gt;&lt;/a&gt; (Docstring conventions)
are two PEPs that describe how Python code should look. The &lt;span class="caps"&gt;PEP8&lt;/span&gt; is not meant to
be dogmatic and adhering to it is not the only necessary prerequisite for good
Python code, but it is a start. Because formatting code by hand is tedious,
using some kind of formatter is almost a&amp;nbsp;necessity.&lt;/p&gt;
&lt;p&gt;When working in a team, it&amp;#8217;s is better when everyones code looks the same.
Ideally it shouldn&amp;#8217;t be obvious who wrote the code from just looking at it. If
everyone is using the same formatter, there will not be any &amp;#8220;stylistic&amp;#8221; comments
in code review and no unnecessary diffs if two people work on the same&amp;nbsp;module.&lt;/p&gt;
&lt;p&gt;There are several code formatters for Python&amp;nbsp;code:&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The Uncompromising Code&amp;nbsp;Formatter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Black is similar to &lt;code&gt;gofmt&lt;/code&gt; - there is almost no configuration (line length is
pretty much the only thing you can configure and even that is discouraged). This
is a good thing because you don&amp;#8217;t have to synchronize configuration across
developers in the&amp;nbsp;team.&lt;/p&gt;
&lt;p&gt;When formatting it makes sure that the &lt;span class="caps"&gt;AST&lt;/span&gt; of the code did not change (it will
not break your&amp;nbsp;code).&lt;/p&gt;
&lt;p&gt;In my experiments it worked pretty well with &lt;code&gt;pycodestyle&lt;/code&gt; (see Linters)
although you may have to disable some&amp;nbsp;checks.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no need to keep config files in sync between&amp;nbsp;developers&lt;/li&gt;
&lt;li&gt;run on save and never think about formatting&amp;nbsp;again&lt;/li&gt;
&lt;li&gt;no need to run style&amp;nbsp;checkers&lt;/li&gt;
&lt;li&gt;supported/owned by Python Software&amp;nbsp;Foundation&lt;/li&gt;
&lt;li&gt;good support in IDEs (can be enabled in VSCode, has plugin in&amp;nbsp;PyCharm)&lt;/li&gt;
&lt;li&gt;is actively&amp;nbsp;developed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a bit unusual line length by default (88&amp;nbsp;characters)&lt;/li&gt;
&lt;li&gt;in tiny amount of cases the formatting could be nicer (it still makes
    sense, but I would do in&amp;nbsp;differently)&lt;/li&gt;
&lt;li&gt;is a new project and formatting can sometimes change between&amp;nbsp;versions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/google/yapf"&gt;&lt;span class="caps"&gt;YAPF&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="caps"&gt;YAPF&lt;/span&gt; is developed by Google and takes a similar approach to &lt;code&gt;black&lt;/code&gt; and &lt;code&gt;gofmt&lt;/code&gt;
but has much more configuration&amp;nbsp;options.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;good support in IDEs (can be enabled in VSCode, has plugin in&amp;nbsp;PyCharm)&lt;/li&gt;
&lt;li&gt;very configurable (if that&amp;#8217;s what you&amp;nbsp;need)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is developed but still considered Alpha (since&amp;nbsp;2015)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/hhatto/autopep8"&gt;autopep8&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Autopep8 fixes errors returned by &lt;code&gt;pycodestyle&lt;/code&gt;. It can be configured to ignore
certain&amp;nbsp;errors.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/timothycrosley/isort"&gt;isort&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another aspect of code formatting is import sorting. Isort will split imports in
a module into types (builtin, local, third party) and sort them&amp;nbsp;alphabetically.&lt;/p&gt;
&lt;p&gt;Pros:
- does its&amp;nbsp;job&lt;/p&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;needs a bit of configuration to work well with Black (see &lt;a href="https://github.com/timothycrosley/isort/issues/694#issuecomment-564261886"&gt;this
issue&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;sometimes changes its mind (depending on active environemnt and available
packages) and causes&amp;nbsp;diffs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Linters&lt;/h2&gt;
&lt;p&gt;Linters are tools that analyze your code and report&amp;nbsp;problems.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://pycodestyle.readthedocs.io/"&gt;pycodestyle&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Check if the code conforms to &lt;span class="caps"&gt;PEP8&lt;/span&gt; standard. Is used by &lt;code&gt;autopep8&lt;/code&gt; to find
errors but can be used also with &lt;code&gt;black&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/PyCQA/pyflakes"&gt;pyflakes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Analyzes syntax tree of modules and looks for various errors. It does not check
for stylistic&amp;nbsp;errors.&lt;/p&gt;
&lt;p&gt;It is fast but the checks it can do are more limited. Is is also
not as configurable. It is a good choice for if you need a linter to run in your&amp;nbsp;editor.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/PyCQA/pylint"&gt;pylint&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From&amp;nbsp;Readme:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Static code analysis tool that looks for programming
errors, helps enforcing a coding standard, finds code smells and suggests&amp;nbsp;refactorings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is very configurable, has &lt;strong&gt;a lot&lt;/strong&gt; of checkers (modules that check certain
things). It also has extensive documentation with &lt;span class="caps"&gt;HOW&lt;/span&gt;-TOs, tutorials and
technical&amp;nbsp;reference.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;powerful&lt;/li&gt;
&lt;li&gt;configurable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slooow for large projects or on slow&amp;nbsp;machines&lt;/li&gt;
&lt;li&gt;too noisy with default settings (best is to disable everything first, then
   enable only what you need). Here is an &lt;a href="https://github.com/datawire/quark/blob/master/.pylintrc"&gt;example&amp;nbsp;config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Static&amp;nbsp;type-checkers&lt;/h2&gt;
&lt;p&gt;Python has type annotation syntax since version &lt;a href="https://www.python.org/dev/peps/pep-3107/"&gt;3.0&lt;/a&gt;
and support for type hints since version 3.5 in
&lt;a href="https://docs.python.org/3.5/library/typing.html#module-typing"&gt;typing&lt;/a&gt; library.
Type annotation are not mandatory (&lt;a href="https://www.python.org/dev/peps/pep-0484/#non-goals"&gt;and never will be&lt;/a&gt;)
and any type checking is left to third party&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;Here are some of the more well-known tools for static type&amp;nbsp;checking:&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://mypy.readthedocs.io/"&gt;mypy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This one feels more &amp;#8220;official&amp;#8221; because Guido is involved in it&amp;#8217;s development and
it lives in &amp;#8220;python&amp;#8221; Github&amp;nbsp;organization.&lt;/p&gt;
&lt;p&gt;It can give you some benefits even with no type annotations in your code. It is
not bulletproof and sometimes needs help but it does catch&amp;nbsp;errors.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://pyre-check.org/"&gt;pyre&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pyre is developed by Facebook but I have not tried&amp;nbsp;it.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/microsoft/pyright"&gt;pyright&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pyright is developed by Microsoft but its Readme&amp;nbsp;states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pyright is a side project with no dedicated team. There is
no guarantee of continued development on the project. If you find it useful,
feel free to use it and contribute to the code&amp;nbsp;base.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Other&amp;nbsp;tools&lt;/h2&gt;
&lt;p&gt;Here are some tools that don&amp;#8217;t belong in any of the categories. Although
interesting, most of these tools are not well known or very&amp;nbsp;mature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/davidhalter/jedi"&gt;jedi&lt;/a&gt; - autocompletion and static
analysis library&lt;ul&gt;
&lt;li&gt;can be integrated with many different editors (Vim, Emacs, Sublime,&amp;nbsp;VSCode,&amp;#8230;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python-rope/rope"&gt;rope&lt;/a&gt; - renaming/refactoring&lt;ul&gt;
&lt;li&gt;only partial Python3&amp;nbsp;support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jendrikseipp/vulture"&gt;Vulture&lt;/a&gt; - finds unused&amp;nbsp;code&lt;/li&gt;
&lt;li&gt;mccabe - code complexity&amp;nbsp;measure&lt;/li&gt;
&lt;li&gt;dodgy - looks for things that  should not be in the code&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;SCM&lt;/span&gt; diff checkings, passwords, secret keys,&amp;nbsp;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bandit.readthedocs.io/"&gt;bandit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;looks for security issues by applying a predefined set of&amp;nbsp;tests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/myint/eradicate"&gt;eradicate&lt;/a&gt; - removes commented-out&amp;nbsp;code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tool&amp;nbsp;bundles&lt;/h2&gt;
&lt;p&gt;There are a couple of projects that bundle several tools&amp;nbsp;togehter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/prospector"&gt;prospector&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Pylint, pyflakes, pycodestyle, mccabe, dodgy and some others by&amp;nbsp;default&lt;/li&gt;
&lt;li&gt;also supports Vulture and&amp;nbsp;mypy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://flake8.pycqa.org/en/latest/"&gt;Flake8&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;PyFlakes, pycodestale,&amp;nbsp;mccabe&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pylama.readthedocs.io/"&gt;pylama&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;pycodestyle, pydocstyle, pyflakes, mccabe, pylint and some other&amp;nbsp;tools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;IDEs&lt;/h2&gt;
&lt;p&gt;All mentioned tools can be used by themselves from command-line or &lt;span class="caps"&gt;CI&lt;/span&gt;/&lt;span class="caps"&gt;CD&lt;/span&gt; (see
below), but mostly we want to have them run in real time while we are writing
code. We are not cave-people banging rocks together - everyone should use some
kind of &lt;span class="caps"&gt;IDE&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;PyCharm&lt;/h3&gt;
&lt;p&gt;PyCharm has its own language server that implements intellisense, refactoring,
linting, import sorting etc. But it has support for &amp;#8220;external tools&amp;#8221; that will
be run from inside the &lt;span class="caps"&gt;IDE&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Visual Studio&amp;nbsp;Code&lt;/h3&gt;
&lt;p&gt;VSCode has great &lt;a href="https://code.visualstudio.com/docs/python/python-tutorial"&gt;support for Python&lt;/a&gt;.
It also has its own language server, but it integrates external tools for
different&amp;nbsp;tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Formatting&lt;ul&gt;
&lt;li&gt;&lt;code&gt;autopep8&lt;/code&gt; is enabled by default, but &lt;code&gt;black&lt;/code&gt; can be enabled in&amp;nbsp;settings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isort&lt;/code&gt; is used by default for import&amp;nbsp;sorting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pylint&lt;/code&gt; is enabled by default but other linters can be used enabled:&lt;ul&gt;
&lt;li&gt;Flake8&lt;/li&gt;
&lt;li&gt;mypy&lt;/li&gt;
&lt;li&gt;pycodestyle&lt;/li&gt;
&lt;li&gt;prospector&lt;/li&gt;
&lt;li&gt;pylama&lt;/li&gt;
&lt;li&gt;bandit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;(Neo)vim&lt;/h3&gt;
&lt;p&gt;Vim is not an &lt;span class="caps"&gt;IDE&lt;/span&gt;, but it can be setup for Python development pretty well.
Here are &lt;a href="https://medium.com/@hanspinckaers/setting-up-vim-as-an-ide-for-python-773722142d1d"&gt;some&lt;/a&gt;
&lt;a href="https://github.com/rapphil/vim-python-ide/"&gt;resources&lt;/a&gt; on how to do that.
&lt;a href="https://github.com/Luminaar/dotfiles/blob/master/nvim/init.vim"&gt;Here&lt;/a&gt; is my&amp;nbsp;setup.&lt;/p&gt;
&lt;p&gt;It is a lot of work but it can be done. I&amp;#8217;m using Vim for Python development
every day at&amp;nbsp;work.&lt;/p&gt;
&lt;h1&gt;Using Python&amp;nbsp;tools&lt;/h1&gt;
&lt;h2&gt;What are we&amp;nbsp;using?&lt;/h2&gt;
&lt;p&gt;Over time and after some discussion our team settled on following tools (by
settled I mean that most of us are using them and we recommend them to&amp;nbsp;newcomers):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;black&lt;/code&gt; for code&amp;nbsp;formatting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isort&lt;/code&gt; configured to work with&amp;nbsp;black&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pylint&lt;/code&gt; and &lt;code&gt;pycodestyle&lt;/code&gt; with configuration in our package definition (more
    on that&amp;nbsp;later)&lt;/li&gt;
&lt;li&gt;optionally &lt;code&gt;mypy&lt;/code&gt; (we are using type annotations in our&amp;nbsp;code)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is not completely clear is how to best &amp;#8220;enforce&amp;#8221; usage of those&amp;nbsp;tools.&lt;/p&gt;
&lt;h2&gt;How to use the&amp;nbsp;tools&lt;/h2&gt;
&lt;p&gt;There are two main&amp;nbsp;use-cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local&amp;nbsp;development&lt;/li&gt;
&lt;li&gt;centralized checks in &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I&amp;#8217;m writing code, I want it to be formatted (&lt;code&gt;black&lt;/code&gt;, &lt;code&gt;isort&lt;/code&gt;) and I want
my &lt;span class="caps"&gt;IDE&lt;/span&gt; to catch errors as I&amp;#8217;m making them (&lt;code&gt;pylint&lt;/code&gt;, language&amp;nbsp;server).&lt;/p&gt;
&lt;p&gt;After pushing my code, I want &lt;span class="caps"&gt;CI&lt;/span&gt; system to check that the code adheres to our
coding standard (so that reviewers don&amp;#8217;t need to waste time checking my
formatting) and check that there are no errors (run tests and static&amp;nbsp;analysis).&lt;/p&gt;
&lt;p&gt;I want the centralized checks to be handled for me so that I don&amp;#8217;t have to worry
about (or forget) setting them up with each new project. But I also would like
to be able run the same checks locally to catch any errors before I push my code
(so I don&amp;#8217;t have to wait for a build to&amp;nbsp;fail).&lt;/p&gt;
&lt;p&gt;So the requirements&amp;nbsp;are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;some tools integrated with the&amp;nbsp;editor&lt;/li&gt;
&lt;li&gt;centralized checks in &lt;span class="caps"&gt;CI&lt;/span&gt; that do not depend on developers remembering to set
    them&amp;nbsp;up&lt;/li&gt;
&lt;li&gt;ability to run the same checks&amp;nbsp;locally&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Tools integrated with the&amp;nbsp;editor&lt;/h3&gt;
&lt;p&gt;This is not something that we as a team can control directly. Everyone uses
different editors and environment. What we have done is agreeing on a common set
of tools which everyone should&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;We have a document called &lt;code&gt;Python Stack&lt;/code&gt; that contains this information. This
document is a kind of a decision log for us. It is also useful for beginners and
newcomers in our&amp;nbsp;team.&lt;/p&gt;
&lt;h3&gt;Centralized checks in &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;As a team we have decided what checks will be run in &lt;span class="caps"&gt;CI&lt;/span&gt; (Teamcity in our case)
and we are letting the system enforce it. Because each project in Teamcity is
created from a template, we don&amp;#8217;t need to worry about setting the checks up&amp;nbsp;ourselves.&lt;/p&gt;
&lt;p&gt;These checks require some configuration and with that comes a question of where
to put it. In our team we put all our code in Python packages that have a
&lt;code&gt;setup.cfg&lt;/code&gt; file. This file can be used to store configuration for &lt;code&gt;pylint&lt;/code&gt;,
&lt;code&gt;pycodestyle&lt;/code&gt; and many other&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;To make packaging more comfortable, we use &lt;a href="https://cookiecutter.readthedocs.io/"&gt;cookicutter
templates&lt;/a&gt;. That way configuration is the
same for all projects but can be customized if needed. Checks in Teamcity then
rely on this configuration. This is a compromise between centralized control and
freedom to customize&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;Here is an example of a package configuration (from my &lt;a href="https://github.com/Luminaar/k8secret"&gt;personal
project&lt;/a&gt; but it is based on what we use in&amp;nbsp;production).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setup.py&lt;/code&gt; looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and &lt;code&gt;setup.cfg&lt;/code&gt; file looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;[options]&lt;/span&gt;

&lt;span class="na"&gt;setup_requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    pytest-runner &amp;gt;= 5.0, &amp;lt;6.0&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="na"&gt;tests_require&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    pytest &amp;gt;=5.0, &amp;lt;6.0&lt;/span&gt;
&lt;span class="s"&gt;    pytest-cov &amp;gt;=2.8.1, &amp;lt;3.0&lt;/span&gt;
&lt;span class="s"&gt;    pytest-pylint &amp;gt;=0.14.1, &amp;lt;1.0&lt;/span&gt;
&lt;span class="s"&gt;    pytest-pycodestyle &amp;gt;=2.0.0, &amp;lt;3.0&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;[aliases]&lt;/span&gt;
&lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;pytest&lt;/span&gt;

&lt;span class="k"&gt;[tool:pytest]&lt;/span&gt;
&lt;span class="na"&gt;addopts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;--verbose --pylint --pylint-rcfile=setup.cfg --cov=k8secrets --cov-report html --pycodestyle&lt;/span&gt;

&lt;span class="k"&gt;[pycodestyle]&lt;/span&gt;
&lt;span class="c1"&gt;# Black tries to enforce 88 characters but will leave&lt;/span&gt;
&lt;span class="c1"&gt;# long strings unchanged. We leave some room for that&lt;/span&gt;
&lt;span class="na"&gt;max-line-length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;120&lt;/span&gt;
&lt;span class="na"&gt;ignore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;E4,E7,W3&lt;/span&gt;

&lt;span class="c1"&gt;# Configuration for pylint&lt;/span&gt;
&lt;span class="k"&gt;[MASTER]&lt;/span&gt;
&lt;span class="na"&gt;ignore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;CVS&lt;/span&gt;
&lt;span class="na"&gt;good-names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;logger,e,i,j,n,m,f,_&lt;/span&gt;

&lt;span class="k"&gt;[MESSAGES CONTROL]&lt;/span&gt;
&lt;span class="na"&gt;disable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;all&lt;/span&gt;
&lt;span class="na"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;unused-import,&lt;/span&gt;
&lt;span class="s"&gt;       fixme,&lt;/span&gt;
&lt;span class="s"&gt;       useless-object-inheritance,&lt;/span&gt;
&lt;span class="s"&gt;       unused-variable,&lt;/span&gt;
&lt;span class="s"&gt;       unused-argument,&lt;/span&gt;
&lt;span class="s"&gt;       unexpected-keyword-arg,&lt;/span&gt;
&lt;span class="s"&gt;       string,&lt;/span&gt;
&lt;span class="s"&gt;       unreachable,&lt;/span&gt;
&lt;span class="s"&gt;       invalid-name,&lt;/span&gt;
&lt;span class="s"&gt;       logging-not-lazy,&lt;/span&gt;
&lt;span class="s"&gt;       unnecesary-pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Running &lt;span class="caps"&gt;CI&lt;/span&gt; checks&amp;nbsp;locally&lt;/h3&gt;
&lt;p&gt;If you look at the package configuration you will see a lot of different
&lt;code&gt;pytest&lt;/code&gt; related&amp;nbsp;dependencies.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pytest-runner&lt;/code&gt; allows us to run tests with &lt;code&gt;setuptools&lt;/code&gt; like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python setup.py test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will install the package and its dependencies and run tests. This is done
independently in its own&amp;nbsp;environment.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pytest-cov&lt;/code&gt;, &lt;code&gt;pytest-pylint&lt;/code&gt; and &lt;code&gt;pytest-pycodestyle&lt;/code&gt; are plugins that run code
coverage, pylint and pycodestyle respectively, together with&amp;nbsp;tests.&lt;/p&gt;
&lt;p&gt;This works both locally and in Teamcity, so you can run &lt;span class="caps"&gt;CI&lt;/span&gt; checks before pushing
your code. One option is to add a pre-commit hook to the Git repository that
will not allow commiting code that did not pass the checks. This is up to each
developer and needs to be done for each project. There are some tools that help
with this, such as &lt;a href="https://pre-commit.com/"&gt;pre-commit.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One issue with setup that I personally have is, that I always run my tests with
setuptools (&lt;code&gt;python setup.py test&lt;/code&gt;) and that runs both tests and linters
every time. I haven&amp;#8217;t found a good solution yet. For now I just turn off the
linters temporarily (I run linters with the same settings right in my editor).
This is of course not ideal, because I can easily forget to turn the linters back
on and they will not run in &lt;span class="caps"&gt;CI&lt;/span&gt;.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;There really isn&amp;#8217;t one. I&amp;#8217;ve described some tools and hove we use some of them
in our team. There is still a lot that can be improved and that will happen
incrementally over time. For now, we are happy with how everything&amp;nbsp;works.&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>Article list from December ofÂ 2019</title><link href="https://luminar.dev/notes/20-01-article-list-from-december-of-2019/" rel="alternate"></link><published>2020-01-01T21:23:05+01:00</published><updated>2020-01-01T21:23:05+01:00</updated><author><name>max</name></author><id>tag:luminar.dev,2020-01-01:/notes/20-01-article-list-from-december-of-2019/</id><summary type="html">&lt;p&gt;Some of the articles I&amp;#8217;ve read in December of&amp;nbsp;2019&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is a list of articles I&amp;#8217;ve read last&amp;nbsp;month:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.confluent.io/blog/data-dichotomy-rethinking-the-way-we-treat-data-and-services/"&gt;Microservices: Rethinking the Way We Treat Data and Services | Confluent&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A series of articles on building micro-services with persistent
   event-stores. The first article is especially interesting - it describes
   a &amp;#8220;data dichotomy&amp;#8221; (services want to hide data, data systems want to
   expose everyting). First couple of articles are more general, then it
   gets specific about how to implement such systems with Apache&amp;nbsp;Kafka&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://telegra.ph/Why-OpenBSD-is-marginally-less-horrible-12-05"&gt;Why computers suck and how learning from OpenBSD can make them marginally less horrible â Telegraph&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Why endless backward compatibility is bad and OpenBSD is good thanks to
   not keeping&amp;nbsp;it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.filfre.net/2018/06/doing-windows-part-1-ms-dos-and-its-discontents/"&gt;Doing Windows, Part 1: &lt;span class="caps"&gt;MS&lt;/span&gt;-&lt;span class="caps"&gt;DOS&lt;/span&gt; and Its Discontents The Digital Antiquarian&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;How &lt;span class="caps"&gt;MS&lt;/span&gt;-&lt;span class="caps"&gt;DOS&lt;/span&gt; and Windows was created. Actually a 9 part series of articles
   that are fairly long (took me a couple of days to get&amp;nbsp;through)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/2018/11/01/tailwind--write-css-without-the-css/"&gt;Tailwind: style your site without writing any &lt;span class="caps"&gt;CSS&lt;/span&gt;! - Julia Evans&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This is a new way of thinking about web-design for me - &lt;span class="caps"&gt;CSS&lt;/span&gt; frameworks. Instead of writing &lt;span class="caps"&gt;CSS&lt;/span&gt;,
   you just use a lot of pre-defined classes in your &lt;span class="caps"&gt;HTML&lt;/span&gt; to style your
   website. I would like to try it out in the&amp;nbsp;future&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wired.com/story/i-ditched-google-for-duckduckgo-heres-why-you-should-too/"&gt;I Ditched Google for DuckDuckGo. Here&amp;#8217;s Why You Should Too | &lt;span class="caps"&gt;WIRED&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A couple of reasons to use &lt;span class="caps"&gt;DDG&lt;/span&gt; instead of Google (which I&amp;#8217;m doing anyway for more than a year&amp;nbsp;now)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meaningness.com/metablog/how-to-think"&gt;How To Think Real Good | Meaningness&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A bit ranty article about what goes into making good decisions (I guess).
   I&amp;#8217;m planning to come back to this and read more of the website. This also
   got me curious about the &amp;#8220;rationalist community&amp;#8221; (e.g. &lt;a href="https://www.lesswrong.com/"&gt;lesswrong.com&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://a2larm.cz/2019/11/noam-chomsky-znovu-se-vraci-reci-o-tom-ze-mame-prilis-mnoho-demokracie/"&gt;Noam Chomsky: Znovu se vracÃ­ ÅeÄi oÂ tom, Å¾e mÃ¡me âpÅÃ­liÅ¡ mnoho demokracieâ â A2larm&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A Czech translation of an afterword to Hate Inc. by Matt Taibbi - an
   interview with Noam Chomsky. I&amp;#8217;m planning to read Hate Inc. and a couple
   of other books in mentioned in this article (Private Government by
   Elizabeth Andersons, Manufacturing Consent by Noam Chomsky and some&amp;nbsp;others)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://newrepublic.com/article/155666/life-algorithm"&gt;Life Under the Algorithm | The New&amp;nbsp;Republic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nadiaeghbal.com/phd"&gt;Nadia Eghbal | Reimagining the&amp;nbsp;PhD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jancovici.com/en/energy-transition/energy-and-us/what-is-energy-actually/"&gt;What is energy, actually? â Jean-Marc Jancovici&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This is a pretty dense article that describes relationships between &lt;span class="caps"&gt;GDP&lt;/span&gt;
   and energy&amp;nbsp;production/consumption&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://newrepublic.com/article/155993/can-internet-survive-climate-change"&gt;Can the Internet Survive Climate Change? | The New Republic&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;I have never really considered the environmental effects of internet
   infrastructure and usage until I read this&amp;nbsp;article&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nytimes.com/2019/10/21/smarter-living/how-to-give-better-advice.html"&gt;How to Give People Advice Theyâll Be Delighted to Take - The New York&amp;nbsp;Times&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@adent/jemne-umeni-blahosklonneho-povyseni-6ba4b01e919e"&gt;JemnÃ© umÄnÃ­ blahosklonnÃ©ho povÃ½Å¡enÃ­ - Martin âadentâ MalÃ½ -&amp;nbsp;Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This list is generated automatically from bookmarks in my browser. The notes are added&amp;nbsp;manually.&lt;/p&gt;</content><category term="Articles"></category><category term="Articles"></category></entry><entry><title>Article list from November ofÂ 2019</title><link href="https://luminar.dev/notes/19-12-article-list-from-november-of-2019/" rel="alternate"></link><published>2019-12-30T14:37:29+01:00</published><updated>2019-12-30T14:37:29+01:00</updated><author><name>max</name></author><id>tag:luminar.dev,2019-12-30:/notes/19-12-article-list-from-november-of-2019/</id><summary type="html">&lt;p&gt;Some of the articles I&amp;#8217;ve read in November of&amp;nbsp;2019&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is a list of articles I&amp;#8217;ve read last&amp;nbsp;month:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ryxcommar.com/2019/11/02/making-good-code-great/?fbclid=IwAR1UZZy2T4Q2iT6h3Rqc9INnEDwWVKQRWvvzLX2VJMaoRdFNAcX7Fv3kFik"&gt;Making Good Code Great â r y x, r&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A couple of tips on how to write nicer Python&amp;nbsp;code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.7mind.io/constructive-test-taxonomy.html"&gt;Unit, Functional, Integration? You are doing it wrong | 7mind.io blog&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A new way to look at types of tests in software. I&amp;#8217;m planning to come back
    to this&amp;nbsp;later&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://reactionwheel.net/2015/01/80s-vc.html"&gt;Heat Death: Venture Capital in the 1980s | Reaction Wheel&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Are we in a bubble? The answer is not that simple. This article provides a
    history of venture capital in 80s&amp;#8217; and 90s&amp;#8217; and compares it to todays&amp;nbsp;situation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://reactionwheel.net/2019/02/boiling-frogs.html"&gt;Boiling Frogs | Reaction&amp;nbsp;Wheel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ethankent.dev/posts/types_are_for_people/"&gt;Types Are for People, not Computers - Ethan Kent&amp;#8217;s&amp;nbsp;Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.acolyer.org/2019/11/20/local-first-software/"&gt;Local-first software: you own your data, in spite of the cloud â the morning paper&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A summary of a scientific paper that describes what local-first
    applications should look and why it is a good&amp;nbsp;idea.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://typesetinthefuture.com/2016/06/19/bladerunner/"&gt;Blade Runner | Typeset In The Future&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;An in-depth look at typography and design of the original Bladerunner&amp;nbsp;film.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.loc.gov/preservation/resources/rfs/TOC.html"&gt;Recommended Formats Statement â table of contents | Resources (Preservation, Library of Congress)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Which data formats and media should I choose if I want my data to&amp;nbsp;last?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://software.rajivprab.com/2019/06/02/cracking-the-senior-software-interview/"&gt;Cracking the Senior Software Interview â Software the Hard&amp;nbsp;way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://software.rajivprab.com/2019/04/28/rethinking-software-testing-perspectives-from-the-world-of-hardware/"&gt;Rethinking Software Testing: Perspectives from the world of Hardware â Software the Hard&amp;nbsp;way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://logicmag.io/nature/oil-is-the-new-data/"&gt;Oil is the New Data&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;How &amp;#8220;big tech&amp;#8221; is collaborating with &amp;#8220;big oil&amp;#8221; to kill us&amp;nbsp;faster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This list is generated automatically from bookmarks in my browser. The notes are
added&amp;nbsp;manually.&lt;/p&gt;</content><category term="Articles"></category><category term="Articles"></category></entry><entry><title>Python - what is new in whichÂ version?</title><link href="https://luminar.dev/notes/19-06-python-what-is-new-in-which-version/" rel="alternate"></link><published>2019-06-10T15:17:58+02:00</published><updated>2019-06-10T15:17:58+02:00</updated><author><name>max</name></author><id>tag:luminar.dev,2019-06-10:/notes/19-06-python-what-is-new-in-which-version/</id><summary type="html">&lt;p&gt;A summary of new features and improvements in Python versions from 3.5 to&amp;nbsp;3.8&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post I would like to summarize which features can be used in which
Python3 versions. I only choose features and changes that are relevant or
interesting to me. There is a link to &amp;#8220;What&amp;#8217;s new&amp;#8221; page for each version where
you can find the full&amp;nbsp;list.&lt;/p&gt;
&lt;h2&gt;Python&amp;nbsp;3.5&lt;/h2&gt;
&lt;p&gt;Released in September 2015. Comes pre-installed on Debian 9 (Stretch) and Ubuntu
16.04. Complete list of changes is &lt;a href="https://docs.python.org/3.5/whatsnew/3.5.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;New&amp;nbsp;syntax&lt;/h3&gt;
&lt;p&gt;Coroutines can now be defined with &lt;code&gt;async&lt;/code&gt; keyword and awaited with &lt;code&gt;await&lt;/code&gt;
keyword. These keywords are not reserved yet. They will be
become proper reserved keywords in Python&amp;nbsp;3.7.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;async&lt;/code&gt; can also be used in &lt;a href="https://docs.python.org/3.5/reference/compound_stmts.html#async-for"&gt;async for&lt;/a&gt;
and &lt;a href="https://docs.python.org/3.5/reference/compound_stmts.html#async-with"&gt;async with&lt;/a&gt;
statements for asynchronous &lt;code&gt;for&lt;/code&gt; loops and context&amp;nbsp;managers.&lt;/p&gt;
&lt;h3&gt;New library&amp;nbsp;modules&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.5/library/typing.html#module-typing"&gt;typing&lt;/a&gt; module adds support for Type Hints (&lt;a href="https://www.python.org/dev/peps/pep-0484/"&gt;&lt;span class="caps"&gt;PEP484&lt;/span&gt;&lt;/a&gt;).
While syntax for function annotation was introduced back in Python3.0 (&lt;a href="https://www.python.org/dev/peps/pep-3107/"&gt;&lt;span class="caps"&gt;PEP3107&lt;/span&gt;&lt;/a&gt;),
this module provides some standard tools (such as types Any, Union, Tuple,
Callable, etc.) that can be used in type&amp;nbsp;annotations.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.5/library/zipapp.html#module-zipapp"&gt;zipapp&lt;/a&gt; provides
tools to manage the creation of zip files containing Python code, which can be
executed directly by the Python&amp;nbsp;interpreter.&lt;/p&gt;
&lt;h3&gt;Improvements in&amp;nbsp;stdlib&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.5/library/collections.html#collections.OrderedDict"&gt;collections.OrderedDict&lt;/a&gt;
is significantly faster&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;&lt;a href="s://docs.python.org/3.5/library/os.html#os.scandir"&gt;os.scandir()&lt;/a&gt; is a new
function for &lt;a href="https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-471"&gt;better and faster way of directory
traversal&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Python&amp;nbsp;3.6&lt;/h2&gt;
&lt;p&gt;Released in December 2016. Comes pre-installed on Ubuntu 18.04. Complete list
of changes is &lt;a href="https://docs.python.org/3.8/whatsnew/3.6.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;New&amp;nbsp;syntax&lt;/h3&gt;
&lt;p&gt;Formatted string literals
(&lt;a href="https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings"&gt;f-strings&lt;/a&gt;).
Defined in &lt;a href="https://www.python.org/dev/peps/pep-0498/"&gt;&lt;span class="caps"&gt;PEP498&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Max&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, &lt;/span&gt;&lt;span class="si"&gt;{name}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Support for variable type hints
(&lt;a href="https://www.python.org/dev/peps/pep-0498/"&gt;&lt;span class="caps"&gt;PEP526&lt;/span&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Underscores in numeric literals: &lt;code&gt;1_000_000&lt;/code&gt;
(&lt;a href="https://www.python.org/dev/peps/pep-0515/"&gt;&lt;span class="caps"&gt;PEP515&lt;/span&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Asynchronous generators (&lt;a href="https://www.python.org/dev/peps/pep-0525/"&gt;&lt;span class="caps"&gt;PEP525&lt;/span&gt;&lt;/a&gt;)
and comprehensions (&lt;a href="https://www.python.org/dev/peps/pep-0530/"&gt;&lt;span class="caps"&gt;PEP530&lt;/span&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;New library&amp;nbsp;modules&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.8/library/secrets.html#module-secrets"&gt;secrets&lt;/a&gt; for
generating cryptographically strong random numbers suitable for managing data
such as passwords, account authentication, security tokens, and related secrets.
Described in &lt;a href="https://www.python.org/dev/peps/pep-0505/"&gt;&lt;span class="caps"&gt;PEP506&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Implementation&amp;nbsp;improvements&lt;/h3&gt;
&lt;p&gt;The new implementation of dictionaries is 20% to 25% more compact and preserves
insertion order (but this &lt;strong&gt;should not&lt;/strong&gt; be relied upon yet). See this great
&lt;a href="https://www.youtube.com/watch?v=p33CVV29OG8"&gt;talk by Raymond Hettinger&lt;/a&gt; in which he explains how dictionaries changed over&amp;nbsp;time.&lt;/p&gt;
&lt;h3&gt;Improvements in&amp;nbsp;stdlib&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.8/library/asyncio.html#module-asyncio"&gt;asyncio&lt;/a&gt; is no
longer provisional and the &lt;span class="caps"&gt;API&lt;/span&gt; is considered&amp;nbsp;stable.&lt;/p&gt;
&lt;p&gt;A new &lt;a href="https://docs.python.org/3.8/whatsnew/3.6.html#whatsnew36-pep519"&gt;file system path
protocol&lt;/a&gt; was added
to support &lt;a href="https://docs.python.org/3.8/glossary.html#term-path-like-object"&gt;path-like object&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://docs.python.org/3.8/library/datetime.html#module-datetime"&gt;datetime&lt;/a&gt;
module has gained support for &lt;a href="https://docs.python.org/3.8/whatsnew/3.6.html#whatsnew36-pep495"&gt;Local Time Disambiguation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json.load()&lt;/code&gt; and &lt;code&gt;json.loads()&lt;/code&gt; now support binary&amp;nbsp;input.&lt;/p&gt;
&lt;p&gt;A new function &lt;a href="https://docs.python.org/3.8/library/random.html#random.choices"&gt;random.choices()&lt;/a&gt;
returns a list of specified size with elements from a population with
optional&amp;nbsp;weights.&lt;/p&gt;
&lt;p&gt;Class &lt;code&gt;unittest.mock.Mock&lt;/code&gt; has new methods &lt;code&gt;assert_called&lt;/code&gt; and
&lt;code&gt;assert_called_once&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Python&amp;nbsp;3.7&lt;/h2&gt;
&lt;p&gt;Released in June 2018. Comes pre-installed on Debian 10 (Buster) and  Ubuntu
18.04 and 19.04. Complete list of changes is &lt;a href="https://docs.python.org/3.8/whatsnew/3.7.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;New syntax&amp;nbsp;features&lt;/h3&gt;
&lt;p&gt;Postponed evaluation of type annotations (&lt;a href="https://www.python.org/dev/peps/pep-0526/"&gt;&lt;span class="caps"&gt;PEP526&lt;/span&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Annotations can now support forward&amp;nbsp;references&lt;/li&gt;
&lt;li&gt;Annotations are cheaper and faster to&amp;nbsp;store&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; are now reserved&amp;nbsp;keywords.&lt;/p&gt;
&lt;h3&gt;New library&amp;nbsp;modules&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.8/library/dataclasses.html#module-dataclasses"&gt;dataclasses&lt;/a&gt;
provides a decorator and functions for automatically adding generated special
methods such as &lt;code&gt;__init__()&lt;/code&gt; and &lt;code&gt;__repr__()&lt;/code&gt; to user-defined classes. It is useful
when you need to create a simple class that only holds data but has no&amp;nbsp;behavior.&lt;/p&gt;
&lt;h3&gt;New built-in&amp;nbsp;features&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.8/library/functions.html#breakpoint"&gt;breakpoint()&lt;/a&gt; function for&amp;nbsp;debuggers.&lt;/p&gt;
&lt;p&gt;Dictionaries now officially preserve insertion order of&amp;nbsp;elements.&lt;/p&gt;
&lt;h3&gt;Improvements in&amp;nbsp;stdlib&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.8/library/asyncio.html#module-asyncio"&gt;asyncio&lt;/a&gt;
received a lot of new features and improvements (high-level &lt;code&gt;asyncio.run()&lt;/code&gt;
function for running coroutines, many&amp;nbsp;others).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.8/library/time.html#module-time"&gt;time&lt;/a&gt; module now has support for &lt;a href="https://docs.python.org/3.8/whatsnew/3.7.html#whatsnew37-pep564"&gt;nanosecond resolution&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Deprecations&lt;/h3&gt;
&lt;p&gt;Debian 8, Ubuntu 16, CentOS 7.5 and other platforms that use OpenSSL 0.9.8 and
1.0.1 are no longer supported. At least OpenSSL 1.0.2 is required. You can build
Python3.7 on those platforms but you have to manually link a new OpenSSL&amp;nbsp;version.&lt;/p&gt;
&lt;h2&gt;Python&amp;nbsp;3.8&lt;/h2&gt;
&lt;p&gt;Will be released sometime in 2019. Will come pre-installed on Debian 9, Ubuntu
19.04. Complete list of changes is &lt;a href="https://docs.python.org/3.8/whatsnew/3.8.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;New&amp;nbsp;syntax&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0572/"&gt;Assignment expressions&lt;/a&gt; (the &amp;#8220;walrus operator&amp;#8221;, &lt;code&gt;:=&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;List is too long (&lt;/span&gt;&lt;span class="si"&gt;{n}&lt;/span&gt;&lt;span class="s2"&gt; elements, expected &amp;lt;= 10)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0570/"&gt;Positional only arguments&lt;/a&gt;: There is
new syntax (&lt;code&gt;/&lt;/code&gt;) to indicate that some function parameters must be specified&amp;nbsp;positionally.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is in addition to &lt;a href="https://www.python.org/dev/peps/pep-3102/"&gt;keyword only arguments&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Library&amp;nbsp;improvements&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;json.tool&lt;/code&gt; has a new option (&lt;code&gt;--json-lines&lt;/code&gt;) to parse every input line as
separate &lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;object.&lt;/p&gt;
&lt;p&gt;New class &lt;code&gt;unittest.mock.AsyncMock&lt;/code&gt; for asynchronous&amp;nbsp;mocking.&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="python3"></category></entry><entry><title>PythonÂ decorators</title><link href="https://luminar.dev/notes/19-04-python-decorators/" rel="alternate"></link><published>2019-04-23T18:00:00+02:00</published><updated>2019-04-23T18:00:00+02:00</updated><author><name>max</name></author><id>tag:luminar.dev,2019-04-23:/notes/19-04-python-decorators/</id><summary type="html">&lt;p&gt;What I wish I knew when I first tried to understand&amp;nbsp;decorators.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It took me quite a while to understand how decorators work in Python
and when are they useful. And even after I understood them, I still
had to look up how to do them properly (for example how to make a
decorator with&amp;nbsp;parameters).&lt;/p&gt;
&lt;p&gt;Then a I saw this paragraph in the &lt;a href="https://docs.python.org/3/reference/compound_stmts.html#function"&gt;official documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A function definition may be wrapped by one or more &lt;strong&gt;decorator
expressions&lt;/strong&gt;. Decorator &lt;strong&gt;expressions are evaluated when the
function is defined&lt;/strong&gt;, in the scope that contains the function
definition. &lt;strong&gt;The result must be a callable&lt;/strong&gt;, which is invoked &lt;strong&gt;with
the function object as the only argument&lt;/strong&gt;. The &lt;strong&gt;returned value is
bound to the function name instead of the function object&lt;/strong&gt;.
Multiple decorators are applied in nested&amp;nbsp;fashion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have not found any other explanation of decorators anywhere else in
the docs. Because there is nothing more to&amp;nbsp;explain!&lt;/p&gt;
&lt;p&gt;All you need to know is that your &lt;code&gt;@expression&lt;/code&gt; has to return a
callable which will be called with the wrapped function as an
argument, and result will be bound to the function name. And
that&amp;#8217;s&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;A simple decorator might look something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;funs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Stop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@logs&lt;/span&gt;  &lt;span class="c1"&gt;# Return the wrapper directly&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greeter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;{name}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Need to pass arguments to the&amp;nbsp;wrapper?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;repeated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;

    &lt;span class="nd"&gt;@repeated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Call `repeated` to get the wrapper&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The lesson is: read the documentation, it&amp;#8217;s all there. I know I&amp;nbsp;didn&amp;#8217;t&amp;#8230;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>TechnickÃ½ dluh a jeho dopady na kvalituÂ softwaru</title><link href="https://luminar.dev/notes/19-03-technicky-dluh-a-jeho-dopady-na-kvalitu-softwaru/" rel="alternate"></link><published>2019-03-05T00:00:00+01:00</published><updated>2019-03-05T00:00:00+01:00</updated><author><name>max</name></author><id>tag:luminar.dev,2019-03-05:/notes/19-03-technicky-dluh-a-jeho-dopady-na-kvalitu-softwaru/</id><summary type="html">&lt;p&gt;ShrnutÃ­ poznatkÅ¯ o technickÃ©m&amp;nbsp;dluhu&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tento pÅÃ­spÄvek je upravenou verzÃ­ semestrÃ¡lnÃ­ prÃ¡ce, kterou
jsem vypracoval v rÃ¡mci studia (pÅedmÄt ÅÃ­zenÃ­ kvality &lt;span class="caps"&gt;SW&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;PÅ¯vodnÃ­ prÃ¡ce mÄla asi 15 stran a pokouÅ¡ela se o akademickÃ½ formÃ¡t -
trpnÃ½ rod, citace, zavÃ¡dÄnÃ­ kaÅ¾dÃ©ho pouÅ¾itÃ©ho pojmu, pÅeklÃ¡dÃ¡nÃ­ bÄÅ¾nÄ
zavedenÃ½ch vÃ½razÅ¯ do ÄeÅ¡tiny. Pokusil jsem se to upravit do trochu
lidÅ¡tÄjÅ¡Ã­ formy, ale je moÅ¾nÃ©, Å¾e mi nÄkterÃ© vÄci unikly. Napadlo
mnÄ, pÅeloÅ¾it celou vÄc do angliÄtiny, ale nakonec jsem se rozhodl,
Å¾e mÃ¡m zÃ¡bavnÄjÅ¡Ã­ vÄci na&amp;nbsp;prÃ¡ci.&lt;/p&gt;
&lt;p&gt;ÄlÃ¡nek je v podstatÄ kompilacÃ­ informacÃ­, kterÃ© se mi podaÅilo najÃ­t
k tÃ©matu. Jsou to pÅ¯vodnÃ­ blogy, nÄkolik knih o &lt;span class="caps"&gt;SW&lt;/span&gt; inÅ¾enÃ½rstvÃ­, kterÃ©
se o technickÃ©m dluhu krÃ¡tce zmiÅujÃ­, nebo akademickÃ© prÃ¡ce, kterÃ© se
snaÅ¾Ã­ z toho udÄlat vÄdu (viz odkazy v textu a seznam literatury na
konci ÄlÃ¡nku). KdyÅ¾ jsem zaÄÃ­nal s psanÃ­m, pÅiÅ¡lo mi, Å¾e
vlastnÄ nemÃ¡m moc o Äem. Nakonec se mi podaÅilo dÃ¡t dohromady docela
obsÃ¡hlÃ½&amp;nbsp;pÅehled.&lt;/p&gt;
&lt;p&gt;HlavnÃ­ ÃºÄel tohoto ÄlÃ¡nku vidÃ­m v sjednocenÃ­ a vyjasnÄnÃ­ pojmÅ¯ pro
nÃ¡sledujÃ­cÃ­ diskuze o technickÃ©m dluhu na&amp;nbsp;projektech.&lt;/p&gt;
&lt;h2&gt;Ãvod&lt;/h2&gt;
&lt;p&gt;TechnickÃ½ dluh je metafora, kterÃ¡ vystihuje ÄastÃ½ jev, vznikajÃ­cÃ­ pÅi
tvorbÄ softwarovÃ½ch systÃ©mÅ¯* . Tento jev mÃ¡ tÃ©mÄÅ vÅ¾dy negativnÃ­
dopady a vyskytuje se v rÅ¯znÃ½ch ÄÃ¡stech systÃ©mu, z rÅ¯znÃ½ch dÅ¯vodÅ¯.
Tento ÄlÃ¡nek obsahuje definici technickÃ©ho dluhu, popisuje jeho
vlastnosti a urÄuje nÄkolik rÅ¯znÃ½ch druhÅ¯. DÃ¡le jsou popsÃ¡ny
ÄastÃ© dÅ¯vody vzniku technickÃ©ho dluhu a jeho pÅÃ­mÃ© i nepÅÃ­mÃ© dopady
na kvalitu softwaru. Nakonec jsou popsÃ¡ny postupy, jak
technickÃ©mu dluhu&amp;nbsp;Äelit.&lt;/p&gt;
&lt;p&gt;* &lt;em&gt;Pojmy software, systÃ©m a projekt jsou pouÅ¾Ã­vÃ¡ny zamÄnitelnÄ pro
  oznaÄenÃ­ celku, na jehoÅ¾ tvorbÄ se podÃ­lÃ­ skupina lidÃ­ (tÃ½m
  vÃ½vojÃ¡ÅÅ¯, management,&amp;nbsp;zÃ¡kaznÃ­ci).&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Definice technickÃ©ho&amp;nbsp;dluhu&lt;/h2&gt;
&lt;p&gt;Pojem technickÃ½ dluh poprvÃ© &lt;a href="http://c2.com/doc/oopsla92.html"&gt;pouÅ¾il Ward Cunningham&lt;/a&gt; jako metaforu,
kterÃ¡ se tÃ½kÃ¡ vÃ½voje&amp;nbsp;softwaru.&lt;/p&gt;
&lt;p&gt;Cunningham uvÃ¡dÃ­, Å¾e aby bylo dosaÅ¾eno nejvÄtÅ¡Ã­ kvality softwaru,
musÃ­ bÃ½t implementace prÅ¯bÄÅ¾nÄ konsolidovÃ¡na (musÃ­ se odstraÅovat
nedostatky a zvyÅ¡ovat jejÃ­ logickÃ¡ soudrÅ¾nost). PoÄÃ¡teÄnÃ­
implementace sice mÅ¯Å¾e bÃ½t ze zaÄÃ¡tku pro zÃ¡kaznÃ­ka pÅijatelnÃ¡, ale
pokud nebude provÃ¡dÄn pravidelnÃ½ refactoring, mÅ¯Å¾e to ohrozit celou&amp;nbsp;organizaci:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VydÃ¡nÃ­ prvnÃ­ verze softwaru je jako pÅ¯jÄka. MalÃ¡ pÅ¯jÄka zrychluje
vÃ½voj pokud je brzo splacena refactoringem &amp;#8230; NebezpeÄnÃ­ nastÃ¡vÃ¡,
pokud nenÃ­ dluh splacen. KaÅ¾dÃ¡ minuta kdy je pouÅ¾Ã­vÃ¡n ne zcela
sprÃ¡vnÃ½ kÃ³d jsou Ãºroky z tohoto dluhu. CelÃ© vÃ½vojÃ¡ÅskÃ© organizace
mohou bÃ½t tÃ­hou dluhu nekonsolidovanÃ©ho softwaru zcela&amp;nbsp;zastaveny.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://wiki.c2.com/?WardExplainsDebtMetaphor"&gt;Ward pozdÄji upÅesÅuje&lt;/a&gt;, Å¾e tato
metafora neznamenÃ¡ vytvoÅenÃ­ Å¡patnÃ© implementace a jejÃ­ho pozdÄjÅ¡Ã­ho
upravenÃ­ na lepÅ¡Ã­ implementaci.  SpÃ­Å¡e jde o vytvoÅenÃ­ takovÃ©
implementace, kterÃ¡ odpovÃ­dÃ¡ Ãºrovni poznÃ¡nÃ­ danÃ© domÃ©ny a jejÃ­
postupnÃ© zlepÅ¡ovÃ¡nÃ­ s tÃ­m, jak poznÃ¡nÃ­ roste.  TechnickÃ½ dluh podle
nÄj takÃ© neznamenÃ¡ odloÅ¾enÃ­ implementace funkcionality. TÃ½kÃ¡ se jen
technickÃ½ch rozhodnutÃ­, kterÃ¡ ovlivÅujÃ­ dalÅ¡Ã­&amp;nbsp;vÃ½voj.&lt;/p&gt;
&lt;p&gt;Na rozdÃ­l od Cunninghama, ostatnÃ­ autoÅi do svÃ½ch definicÃ­ zahrnujÃ­ i
nedokonalosti implementace. Steve McConnell dÄlÃ­ technickÃ½ dluh podle
nÃ¡sledujÃ­cÃ­ taxonomie (viz toto &lt;a href="https://vimeo.com/49866475"&gt;video&lt;/a&gt;
pro podrobnÃ½&amp;nbsp;popis):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NeoÄekÃ¡vanÃ½&amp;nbsp;dluh&lt;/li&gt;
&lt;li&gt;ÃmyslnÃ½ dluh&lt;ol&gt;
&lt;li&gt;A. KrÃ¡tkodobÃ½&amp;nbsp;dluh&lt;/li&gt;
&lt;li&gt;B. DlouhodobÃ½&amp;nbsp;dluh&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ÃmyslnÃ½ dluh vznikÃ¡ v systÃ©mu pÅijetÃ­m explicitnÃ­ho rozhodnutÃ­, kterÃ©
mÃ¡ svÃ© dÅ¯vody a mÅ¯Å¾e slouÅ¾it vyÅ¡Å¡Ã­mu cÃ­li. NeoÄekÃ¡vanÃ½ dluh naopak
vznikne aniÅ¾ by to nÄkdo pozoroval a pozdÄji zpÅ¯sobuje neÄekanÃ©&amp;nbsp;komplikace.&lt;/p&gt;
&lt;p&gt;KrÃ¡tkodobÃ½ dluh je takovÃ½, u kterÃ©ho se oÄekÃ¡vÃ¡, Å¾e bude splÃ¡cen
Äasto (napÅ. mezi jednotlivÃ½mi vÃ½vojovÃ½mi cykly) nebo prÅ¯bÄÅ¾nÄ.
DlouhodobÃ½ je naopak v systÃ©mu delÅ¡Ã­&amp;nbsp;dobu.&lt;/p&gt;
&lt;p&gt;PodobnÄ jako McConnell, i &lt;a href="https://martinfowler.com/bliki/TechnicalDebtQuadrant.html"&gt;Martin Fowler ve svÃ©m pÅÃ­spÄvku&lt;/a&gt; zahrnuje
neÃºmyslnÃ© nedokonalosti implementace do technickÃ©ho dluhu. NavÃ­c
rozliÅ¡uje, zda byl dluh pÅijat z dobrÃ©ho dÅ¯vodu, Äi nikoliv, pomocÃ­
nÃ¡sledujÃ­cÃ­&amp;nbsp;matice:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align="center"&gt;Reckless&lt;/th&gt;
&lt;th align="center"&gt;Prudent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Deliberate&lt;/td&gt;
&lt;td align="center"&gt;&lt;span class="caps"&gt;II&lt;/span&gt;.&lt;/td&gt;
&lt;td align="center"&gt;I.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Inadvertent&lt;/td&gt;
&lt;td align="center"&gt;&lt;span class="caps"&gt;III&lt;/span&gt;.&lt;/td&gt;
&lt;td align="center"&gt;&lt;span class="caps"&gt;IV&lt;/span&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;PrvnÃ­ kvadrant oznaÄuje technickÃ½ dluh, kterÃ½ byl pÅijat za ÃºÄelem
splnÄnÃ­ nÄjakÃ©ho cÃ­le s plnÃ½m uvÄdomÄnÃ­m si nÃ¡sledkÅ¯ - âSoftware musÃ­
bÃ½t vydÃ¡n hned. UvÄdomujeme si, jak to ovlivnÃ­ dalÅ¡Ã­&amp;nbsp;prÃ¡ciâ.&lt;/p&gt;
&lt;p&gt;DruhÃ½ kvadrant oznaÄuje dluh, kterÃ½ byl pÅijat zÃ¡mÄrnÄ, ale toto
rozhodnutÃ­ nebylo promyÅ¡leno a nemÃ¡ dobrÃ½ dÅ¯vod - âS designem se teÄ
nebudeme&amp;nbsp;zdrÅ¾ovatâ.&lt;/p&gt;
&lt;p&gt;Do tÅetÃ­ho kvadrantu spadajÃ­ pÅÃ­pady, kdy vÃ½vojÃ¡Åi nevÄdÃ­, Å¾e
pÅijÃ­majÃ­ technickÃ½ dluh nejÄastÄji kvÅ¯li vlastnÃ­ neschopnosti -
âNÄjak to tam&amp;nbsp;nasekÃ¡meâ.&lt;/p&gt;
&lt;p&gt;Do poslednÃ­ho kvadrantu patÅÃ­ pÅÃ­pady, kdy vÃ½vojÃ¡Åi sice udÄlali
neoptimÃ¡lnÃ­ rozhodnutÃ­, ale pozdÄji je odhalili a byli schopni se z
nich pouÄit - âTeÄ uÅ¾ vÃ­me, jak na&amp;nbsp;toâ.&lt;/p&gt;
&lt;p&gt;DÃ¡le v tomto ÄlÃ¡nku budeme pracovat s touto&amp;nbsp;definicÃ­:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TechnickÃ½ dluh zahrnuje internÃ­ Äinnosti technickÃ©ho charakteru,
jejichÅ¾ provedenÃ­ bylo odloÅ¾eno (aÅ¥ uÅ¾ ÃºmyslnÄ Äi ne), coÅ¾ bude mÃ­t
do budoucna vliv na kvalitu softwaru a na prÃ¡ci&amp;nbsp;vÃ½vojÃ¡ÅÅ¯&lt;/li&gt;
&lt;li&gt;TechnickÃ½ dluh zahrnuje i nedostatky implementace, kterÃ© nevznikly&amp;nbsp;ÃºmyslnÄ&lt;/li&gt;
&lt;li&gt;OdloÅ¾enÃ­ implementace funkcionality nenÃ­ technickÃ½m&amp;nbsp;dluhem&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Typy technickÃ©ho&amp;nbsp;dluhu&lt;/h2&gt;
&lt;p&gt;Äasto jsou rozliÅ¡ovÃ¡ny rÅ¯znÃ© typy technickÃ©ho dluhu podle toho, kterÃ¡
ÄÃ¡st systÃ©mu ho&amp;nbsp;obsahuje.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dluh kÃ³du&lt;/strong&gt; se projevuje poruÅ¡enÃ­m standardÅ¯ pÅi psanÃ­ zdrojovÃ©ho kÃ³du
(napÅ. nedodrÅ¾enÃ­ stylu, nesprÃ¡vnÃ© pojmenovÃ¡nÃ­ atd). Tento dluh je
Äasto moÅ¾nÃ© odhalit pomocÃ­ statickÃ© analÃ½zu&amp;nbsp;kÃ³du.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DesignovÃ½ dluh&lt;/strong&gt; vznikÃ¡ pÅi nedodrÅ¾enÃ­ zÃ¡sad dobrÃ© softwarovÃ©
architektury a to buÄ od zaÄÃ¡tku (napÅÃ­klad kvÅ¯li nedostatku Äasu)
ale i kdyÅ¾ se poÅ¾adavky mÄnÃ­ na tolik, Å¾e pÅ¯vodnÃ­ architektura je jiÅ¾
nemÅ¯Å¾e&amp;nbsp;uspokojit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TestovacÃ­ dluh&lt;/strong&gt; vznikÃ¡ pÅi nedokonalÃ©m pokrytÃ­ systÃ©mu testy. Ty buÄ
zcela chybÃ­, nebo jsou Å¡patnÄ napsanÃ© a nepomÃ¡hajÃ­ v odhalenÃ­
defektÅ¯. Testy mohou bÃ½t takÃ© zastaralÃ©, protoÅ¾e pÅi pÅedchozÃ­ch
ÃºpravÃ¡ch nebyly upraveny. Pokud dobrÃ© testy existujÃ­, ale nejsou
spouÅ¡tÄny automatizovanÄ, mÅ¯Å¾e to takÃ© bÃ½t technickÃ½m&amp;nbsp;dluhem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DokumentaÄnÃ­ dluh&lt;/strong&gt; je podobnÃ½ jako testovacÃ­ dluh. Dokumentace buÄ zcela chybÃ­,
je neaktuÃ¡lnÃ­ nebo napsanÃ¡&amp;nbsp;nekvalitnÄ.&lt;/p&gt;
&lt;h2&gt;Vlastnosti technickÃ©ho&amp;nbsp;dluhu&lt;/h2&gt;
&lt;p&gt;Metafora technickÃ©ho dluhu se postupnÄ vyvÃ­jela a vznikaly dalÅ¡Ã­
paralely s finanÄnÃ­m dluhem. &lt;a href="https://linkinghub.elsevier.com/retrieve/pii/B9780123855121000025"&gt;C. Seyman a Y.
Guo&lt;/a&gt;
ve svÃ© akademickÃ© prÃ¡ci formalizujÃ­ pojmy, kterÃ© jsou Äasto ve
spojenÃ­ s technickÃ½m dluhem&amp;nbsp;pouÅ¾Ã­vÃ¡ny.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VÃ½Å¡e dluhu&lt;/strong&gt; je mÃ­ra nÃ¡roÄnosti odstranÄnÃ­ technickÃ©ho dluhu. Tuto mÃ­ru
lze udÃ¡vat buÄ jako Äas (napÅ. ÄlovÄko-dny) nebo i v&amp;nbsp;penÄzÃ­ch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PravdÄpodobnost ÃºrokÅ¯&lt;/strong&gt; udÃ¡vÃ¡, jak pravdÄpodobnÃ© je, Å¾e technickÃ½ dluh
ovlivnÃ­ budoucÃ­ prÃ¡ci. NapÅÃ­klad tÃ­m, Å¾e zavinÃ­ defekty v kÃ³du,
nebo Å¾e bude upravovÃ¡n kÃ³d, kterÃ½ nenÃ­ otestovanÃ½ a zdokumentovanÃ½.
OvlivÅujÃ­cÃ­m faktorem mÅ¯Å¾e bÃ½t i Å¡patnÃ¡ architektura, kterÃ¡ ztÃ­Å¾Ã­
pÅidÃ¡nÃ­ novÃ©&amp;nbsp;funkcionality.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VÃ½Å¡e ÃºrokÅ¯&lt;/strong&gt; udÃ¡vÃ¡ mÃ­ru ÃºsilÃ­, kterÃ© bude muset bÃ½t vynaloÅ¾enÃ© navÃ­c,
pokud technickÃ½ dluh nebude&amp;nbsp;odstranÄn.&lt;/p&gt;
&lt;p&gt;Tyto mÃ­ry nelze mÄÅit pÅesnÄ a musÃ­ se odhadovat. PÅesnost tÄchto
odhadÅ¯ bude zÃ¡viset na zkuÅ¡enosti osoby, kterÃ¡ bude odhady provÃ¡dÄt a
takÃ© na dostupnÃ½ch historickÃ½ch datech. ÄÃ­m jsou dostupnÃ¡ data
podrobnÄjÅ¡Ã­, tÃ­m pÅesnÄjÅ¡Ã­ budou odhady. ZÅejmÄ nejtÄÅ¾Å¡Ã­ bude odhad
vÃ½Å¡e ÃºrokÅ¯, protoÅ¾e vÃ½vojÃ¡Åi jen tÄÅ¾ko vezmou v potaz vÅ¡echny
moÅ¾nosti, jak je mÅ¯Å¾e technickÃ½ dluh&amp;nbsp;ovlivnit.&lt;/p&gt;
&lt;h2&gt;DÅ¯vody vzniku technickÃ©ho&amp;nbsp;dluhu&lt;/h2&gt;
&lt;p&gt;PÅirozenÃ½m dÅ¯vodem vzniku technickÃ©ho dluhu, tak jak jej definoval
Cunningham je nedostateÄnÃ¡ znalost problematiky ze strany
vÃ½vojÃ¡ÅÅ¯, zejmÃ©na v poÄÃ¡teÄnÃ­ch stÃ¡diÃ­ch&amp;nbsp;vÃ½voje.&lt;/p&gt;
&lt;p&gt;ÄastÃ½m dÅ¯vodem jsou takÃ© vnÄjÅ¡Ã­ faktory, kterÃ© vyvÃ­jejÃ­ tlak na
vÃ½vojÃ¡Åe, aby zrychlili dokonÄenÃ­ projektu nebo implementaci
funkcionality. TakovÃ½m faktorem mÅ¯Å¾e bÃ½t (technickÃ½) management,
zmÄna poÅ¾adavkÅ¯ zÃ¡kaznÃ­ka (a to i v koneÄnÃ© fÃ¡zi implementace) nebo
zmÄna rÅ¯znÃ½ch vnÄjÅ¡Ã­ch podmÃ­nek (trÅ¾nÃ­, legislativa). ÄasovÃ½ skluz
zpÅ¯sobujÃ­ i nesprÃ¡vnÃ© odhady (zejmÃ©na od tÅetÃ­ch stran, kterÃ© se
pÅÃ­mo nepodÃ­lÃ­ na vÃ½voji), kterÃ© neobsahujÃ­ rezervy, nebo byly
jednoduÅ¡e vytvoÅeny nezkuÅ¡enou&amp;nbsp;osobou.&lt;/p&gt;
&lt;p&gt;VÃ½vojÃ¡Åi nejsou nezÃ¡vislÃ­ na zbytku organizace, musejÃ­ pÅinÃ¡Å¡et
uÅ¾itek naplÅovÃ¡nÃ­m business poÅ¾adavkÅ¯, kterÃ© jsou navÃ­c Äasto
zÃ¡vislÃ© na Äase (danÃ¡ vlastnost softwarovÃ©ho produktu pÅinese zisk
nynÃ­, ale uÅ¾ ne pozdÄji). Äasto se proto musejÃ­ podÅÃ­dit a pÅistoupit
na&amp;nbsp;kompromisy.&lt;/p&gt;
&lt;p&gt;RÅ¯znÃ© typy technickÃ©ho dluhu vznikajÃ­ v rÅ¯znÃ½ch ÄÃ¡stech systÃ©mÅ¯ z
rÅ¯znÃ½ch dÅ¯vodÅ¯. Pokud vÃ½vojÃ¡Åi nejsou dostateÄnÄ kompetentnÃ­, vznikÃ¡
technickÃ½ dluh vÅ¡ude, navÃ­c aniÅ¾ by o nÄm nÄkdo mÄl&amp;nbsp;ponÄtÃ­.&lt;/p&gt;
&lt;p&gt;Dluh zdrojovÃ©ho kÃ³du vznikÃ¡ pokud v tÃ½mu nejsou nastavena urÄitÃ¡
pravidla o tom, jak by mÄl bÃ½t kÃ³d napsÃ¡n. Pro tyto ÃºÄely vznikajÃ­ v
tÃ½mech stylistickÃ© manuÃ¡ly a jsou pouÅ¾Ã­vÃ¡ny automatickÃ© nÃ¡stroje pro
Ãºpravu kÃ³du (tzv.&amp;nbsp;lintery).&lt;/p&gt;
&lt;p&gt;TestovacÃ­ dluh vznikÃ¡, kdyÅ¾ je napsÃ¡nÃ­ testÅ¯ oddÄleno od implementace
funkcionality, tedy pokud jsou testy napsÃ¡ny nÄkÃ½m jinÃ½m, nebo v
pozdÄjÅ¡Ã­m vÃ½vojovÃ©m&amp;nbsp;cyklu.&lt;/p&gt;
&lt;h2&gt;Dopady technickÃ©ho&amp;nbsp;dluhu&lt;/h2&gt;
&lt;p&gt;Vznik technickÃ©ho dluhu nenÃ­ vÅ¾dy neÅ¾Ã¡doucÃ­. Mohou nastat situace,
kdy je moÅ¾nÃ© obhÃ¡jit zadluÅ¾enÃ­. ObecnÄ pÅ¯jde o pÅÃ­pady kdy je
vÃ½hodnÄjÅ¡Ã­ dokonÄit projekt dÅÃ­ve a potÅebnÃ© Ãºpravy Äi refactoring
provÃ©st pozdÄji (nÃ¡klady na tyto budoucÃ­ zmÄny jsou menÅ¡Ã­, neÅ¾
pÅÃ­padnÃ½ uÅ¡lÃ½ zisk, pokud nebude projekt Äi funkcionalita dokonÄena
vÄas). Pokud je kritickÃ© vstoupit na trh co nejdÅÃ­ve, bude pro
organizaci lepÅ¡Ã­ nashromÃ¡Å¾dit technickÃ½ dluh, neÅ¾ promarnit&amp;nbsp;pÅÃ­leÅ¾itost.&lt;/p&gt;
&lt;p&gt;TechnickÃ½ dluh nenÃ­ viditelnÃ½ pro zÃ¡kaznÃ­ky a Äasto ani pro
management, proto nenÃ­ pÅekÃ¡Å¾kou k pouÅ¾Ã­vÃ¡nÃ­ softwaru. Naopak, ÄÃ­m
dÅÃ­ve zÃ¡kaznÃ­k zaÄne software pouÅ¾Ã­vat, tÃ­m dÅÃ­ve dostanou vÃ½vojÃ¡Åi
zpÄtnou vazbu (toto je jedna ze zÃ¡sad &lt;a href="https://agilemanifesto.org/principles.html"&gt;agilnÃ­ho
vÃ½voje&lt;/a&gt;). AvÅ¡ak ÄÃ­m
je vÄtÅ¡Ã­, tÃ­m jsou zmÄny nebo pÅidÃ¡nÃ­ novÃ© funkcionality sloÅ¾itÄjÅ¡Ã­.
NÄkdy mÅ¯Å¾ou bÃ½t zmÄny i nemoÅ¾nÃ©. VÃ½voj se zpomaluje i pÅesto, Å¾e
efektivita vÃ½vojÃ¡ÅÅ¯ je stejnÃ¡ jako pÅedtÃ­m. PoÅ¾adavky zÃ¡kaznÃ­kÅ¯
nejsou naplÅovÃ¡ny nebo nejsou naplÅovÃ¡ny vÄas. Pokud nenÃ­ technickÃ½
dluh âsplÃ¡cenâ, bude se neustÃ¡le zvÄtÅ¡ovat a mÅ¯Å¾e pÅerÅ¯st cenu,
kterou je zÃ¡kaznÃ­k&amp;nbsp;zaplatit.&lt;/p&gt;
&lt;p&gt;VÃ½vojÃ¡Åi jsou ti, kdo jako prvnÃ­ pocÃ­tÃ­ dopady technickÃ©ho dluhu a to
proto, Å¾e s nÃ­m pÅichÃ¡zejÃ­ do styku kaÅ¾dÃ½ den. TechnickÃ½ dluh ztÄÅ¾uje
jejich&amp;nbsp;prÃ¡ci.&lt;/p&gt;
&lt;p&gt;Å patnÄ napsanÃ½ zdrojovÃ½ kÃ³d, kterÃ½ nedodrÅ¾uje konvence je obtÃ­Å¾nÃ©
ÄÃ­st a tÃ­m se ztÄÅ¾uje jeho pochopenÃ­ pro ty, kdo ho nevytvoÅili ale
musÃ­ na nÄm provÃ¡dÄt&amp;nbsp;Ãºpravy.&lt;/p&gt;
&lt;p&gt;Pokud je architektura Å¡patnÄ zvolena, komponenty jsou nadmÄrnÄ
provÃ¡zanÃ© a systÃ©m je pÅÃ­liÅ¡ komplexnÃ­, je obtÃ­Å¾nÃ© pÅidÃ¡vat novou
funkcionalitu a plnit poÅ¾adavky zÃ¡kaznÃ­kÅ¯.  VÃ½vojÃ¡Åi nemajÃ­ jistotu,
Å¾e jakÃ¡koliv zmÄna nezpÅ¯sobÃ­ obtÃ­Å¾nÄ nalezitelnÃ© defekty. SniÅ¾uje se
stabilita celÃ©ho&amp;nbsp;systÃ©mu.&lt;/p&gt;
&lt;h2&gt;Jak Äelit technickÃ©mu&amp;nbsp;dluhu&lt;/h2&gt;
&lt;p&gt;Dopady technickÃ©ho dluhu budou vÅ¾dy negativnÃ­ (nikdy nebudou mÃ­t
pozitivnÃ­ vliv na kvalitu) ale jsou situace, kdy alternativa mÃ¡ jeÅ¡tÄ
horÅ¡Ã­ dopad. VÅ¾dy tedy pÅ¯jde o volbu menÅ¡Ã­ho zla. Je takÃ© zÅejmÃ©, Å¾e
je pro organizaci nejvÃ½hodnÄjÅ¡Ã­ sniÅ¾ovat technickÃ½ dluh na minimum -
splÃ¡cet&amp;nbsp;ho.&lt;/p&gt;
&lt;h3&gt;Identifikace&lt;/h3&gt;
&lt;p&gt;PrvnÃ­m krokem pÅi splÃ¡cenÃ­ technickÃ©ho dluhu je jeho identifikace a
dokumentace. UvnitÅ organizace nebo tÃ½mu by mÄl vzniknout centrÃ¡lnÃ­
seznam vÅ¡ech ÄÃ¡stÃ­ systÃ©mu, kterÃ© jsou technickÃ½m dluhem postiÅ¾enÃ©.
KaÅ¾dÃ¡ poloÅ¾ka by mÄla mÃ­t vypsÃ¡ny vlastnosti dluhu, uvedenÃ©&amp;nbsp;vÃ½Å¡e.&lt;/p&gt;
&lt;p&gt;Tento seznam by mÄl bÃ½t pravidelnÄ udrÅ¾ovanÃ½ a pÅÃ­stupnÃ½ pro vÅ¡echny.
PÅi plÃ¡novÃ¡nÃ­ vÃ½vojovÃ©ho cyklu pak celÃ½ tÃ½m do tohoto seznamu
nahlÃ­Å¾Ã­, aby mÄli vÅ¡ichni pÅehled o technickÃ©m dluhu v&amp;nbsp;systÃ©mu.&lt;/p&gt;
&lt;p&gt;Jeden ze zpÅ¯sobÅ¯ jak identifikovat technickÃ½ dluh je analÃ½za
zdrojovÃ©ho kÃ³du pomocÃ­ rÅ¯znÃ½ch&amp;nbsp;nÃ¡strojÅ¯.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CyklomatickÃ¡ sloÅ¾itost&lt;/strong&gt; udÃ¡vÃ¡ poÄet rÅ¯znÃ½ch cest, kterÃ½mi je moÅ¾nÃ©
programem prochÃ¡zet. ÄÃ­m vÄtÅ¡Ã­ je sloÅ¾itost komponenty, tÃ­m
sloÅ¾itÄjÅ¡Ã­ je jejÃ­ pochopenÃ­, je tÄÅ¾Å¡Ã­ komponentu upravit a zvyÅ¡uje
se pravdÄpodobnost defektÅ¯. PÅespÅÃ­liÅ¡nÃ¡ sloÅ¾itost takÃ© mÅ¯Å¾e sniÅ¾ovat&amp;nbsp;vÃ½kon.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ProvÃ¡zanost kÃ³du&lt;/strong&gt; lze takÃ© mÄÅit rÅ¯znÃ½mi nÃ¡stroji. SilnÃ¡ provÃ¡zanost
zpÅ¯sobuje, Å¾e pÅi zmÄnÄ jednÃ© komponenty (tÅÃ­dy, metody) je nutnÃ©
mÄnit dalÅ¡Ã­ komponenty. TakovÃ© Ãºpravy jsou velice nÃ¡kladnÃ©,
zpÅ¯sobujÃ­ nestabilitu systÃ©mu a vytvÃ¡ÅejÃ­&amp;nbsp;defekty.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.informit.com/articles/article.aspx?p=457502&amp;amp;seqNum=5"&gt;&lt;strong&gt;Duplikace
kÃ³du&lt;/strong&gt;&lt;/a&gt;
v systÃ©mu mÅ¯Å¾e zvyÅ¡ovat technickÃ½ dluh, i kdyÅ¾ ne
vÅ¾dy (nÄkdy mÅ¯Å¾e bÃ½t duplikace vÃ½hodnÃ¡). Äasto vÅ¡ak vede ke
zvÃ½Å¡enÃ© komplexitÄ, zÃ¡tÄÅ¾i pÅi vÃ½voji a niÅ¾Å¡Ã­mu vÃ½konu. Duplikace je
dobÅe mÄÅitelnÃ¡ statickou analÃ½zou&amp;nbsp;kÃ³du.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://martinfowler.com/bliki/TestCoverage.html"&gt;&lt;strong&gt;PokrytÃ­ testy&lt;/strong&gt;&lt;/a&gt;
mÄÅÃ­, kterÃ© ÄÃ¡sti systÃ©mu jsou spuÅ¡tÄny pÅi testovÃ¡nÃ­.
NÃ­zkÃ© pokrytÃ­ je (testovacÃ­m) technickÃ½m dluhem. AvÅ¡ak vysokÃ© pokrytÃ­
nemusÃ­ vÅ¾dy znamenat nÃ­zkÃ½ technickÃ½ dluh, pokud nejsou testy dobÅe&amp;nbsp;navrÅ¾eny.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PoÄet defektÅ¯&lt;/strong&gt; je jasnÃ½m ukazatelem technickÃ©ho dluhu. Pro sledovÃ¡nÃ­
tÃ©to metriky je nutnÃ© mÃ­t co nejpodrobnÄjÅ¡Ã­ databÃ¡zi&amp;nbsp;defektÅ¯.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NÃ¡stroje pro sprÃ¡vu verzÃ­&lt;/strong&gt; obsahujÃ­ nejenom technickÃ½, ale i sociÃ¡lnÃ­
rozmÄr. AnalÃ½zou projektu lze zjistit nejenom jak zdrojovÃ½ kÃ³d
vypadÃ¡ teÄ, ale i jak se mÄnil a kdo Ãºpravy&amp;nbsp;provÃ¡dÄl.&lt;/p&gt;
&lt;p&gt;Lze zjistit, jakÃ© ÄÃ¡sti jsou Äasto upravovÃ¡ny. Pokud je komponenta
Äasto upravovÃ¡na rÅ¯znÃ½mi vÃ½vojÃ¡Åi, mÅ¯Å¾e to znaÄit technickÃ½ dluh.
Pokud je nÄkolik komponent Äasto upravovÃ¡no zÃ¡roveÅ, nenÃ­ systÃ©m
dobÅe navrÅ¾en a mÅ¯Å¾e to zpomalovat dalÅ¡Ã­&amp;nbsp;prÃ¡ci.&lt;/p&gt;
&lt;h3&gt;UrÄenÃ­&amp;nbsp;priorit&lt;/h3&gt;
&lt;p&gt;TechnickÃ½ dluh v systÃ©mu vÄtÅ¡inou nelze vyÅeÅ¡it najednou a proto je
potÅeba urÄit, kterÃ½ technickÃ½ dluh mÃ¡ nejvÄtÅ¡Ã­ dopad. Dluh na
nÄkterÃ½ch ÄÃ¡stech systÃ©mu nemusÃ­ mÃ­t Å¾Ã¡dnÃ½ vliv a proto je moÅ¾nÃ© ho
neodstraÅovat. Na zÃ¡kladÄ odhadovanÃ© vÃ½Å¡e dluhu, pravdÄpodobnosti a
vÃ½Å¡e ÃºrokÅ¯ lze urÄit, na jakÃ© poloÅ¾ky by se mÄl tÃ½m&amp;nbsp;zamÄÅit.&lt;/p&gt;
&lt;p&gt;PoloÅ¾ky, u kterÃ½ch benefit z odstranÄnÃ­ dluhu (pravdÄpodobnost vzniku
Ã vÃ½Å¡e ÃºrokÅ¯) pÅevyÅ¡uje jeho vÃ½Å¡i by mÄly bÃ½t odstranÄny co&amp;nbsp;nejdÅÃ­ve.&lt;/p&gt;
&lt;p&gt;Äas potÅebnÃ½ na splacenÃ­ dluhu je potÅeba zapoÄÃ­tat do odhadÅ¯ na
dalÅ¡Ã­ vÃ½vojovÃ© cykly.  Toto by mÄli dÄlat sami vÃ½vojÃ¡Åi, protoÅ¾e
jejich zÃ¡jem na jeho odstranÄnÃ­ je vÄtÅ¡Ã­ neÅ¾ managementu nebo&amp;nbsp;zÃ¡kaznÃ­ka.&lt;/p&gt;
&lt;h3&gt;SplÃ¡cenÃ­&amp;nbsp;dluhu&lt;/h3&gt;
&lt;p&gt;JednoduchÃ½m ÅeÅ¡enÃ­m pro splacenÃ­ dluhu je pÅeruÅ¡enÃ­ vÃ½voje a zamÄÅenÃ­
ÃºsilÃ­ celÃ©ho vÃ½vojÃ¡ÅskÃ©ho tÃ½mu na tuto Äinnost. Tato moÅ¾nost je vÅ¡ak
pro zÃ¡kaznÃ­ky nepÅijatelnÃ¡, protoÅ¾e nezÃ­skÃ¡vajÃ­ pÅidanou hodnotu.
Tento postup by mÄl bÃ½t volen aÅ¾ v krajnÃ­ch pÅÃ­padech, kdy dalÅ¡Ã­
rozvoj nenÃ­ moÅ¾nÃ½, bez kompletnÃ­ho pÅedÄlÃ¡nÃ­ celÃ©ho&amp;nbsp;systÃ©mu.&lt;/p&gt;
&lt;p&gt;PÅijatelnÄjÅ¡Ã­m ÅeÅ¡enÃ­m pro vÄtÅ¡inu projektÅ¯ je postupnÃ© splÃ¡cenÃ­
dluhu. VÃ½vojÃ¡Åi mÅ¯Å¾ou vyÄlenit urÄitÃ½ Äas, kdy se budou vÄnovat
splÃ¡cenÃ­ technickÃ©ho dluhu. Tento Äas by mÄl bÃ½t zapoÄÃ­tÃ¡n do odhadÅ¯
pÅi plÃ¡novÃ¡nÃ­ vÃ½vojovÃ½ch&amp;nbsp;cyklÅ¯.&lt;/p&gt;
&lt;p&gt;DobrÃ½m pÅÃ­stupem je dodrÅ¾ovÃ¡nÃ­ tzv. Boy-scout rule neboli
provÃ¡dÄt oportunistickÃ½ refactoring. PokaÅ¾dÃ© kdyÅ¾ vÃ½vojÃ¡Å zaÄne
upravovat nÄjakou ÄÃ¡st kÃ³du (aby opravil defekt nebo pÅidal novou
funkcionalitu), provede refactoring a splatÃ­ pokud moÅ¾no vÅ¡echen
technickÃ½ dluh na tomto&amp;nbsp;mÃ­stÄ.&lt;/p&gt;
&lt;h3&gt;PÅedchÃ¡zenÃ­&amp;nbsp;vzniku&lt;/h3&gt;
&lt;p&gt;VÃ½vojÃ¡Åi mohou pÅedchÃ¡zet vzniku technickÃ©ho dluhu tak, Å¾e potÅebnÃ©
Äinnosti (napÅ. refactoring) provedou ihned a neodloÅ¾Ã­ jej na
pozdÄjÅ¡Ã­ Äas (coÅ¾ je ne vÅ¾dy&amp;nbsp;moÅ¾nÃ©).&lt;/p&gt;
&lt;p&gt;Vzniku dluhu lze pÅedchÃ¡zet tÃ­m, Å¾e bude zabrÃ¡nÄno vnÄjÅ¡Ã­m vlivÅ¯m
vyvÃ­jet tlak na zrychlenÃ­ ÄasovÃ©ho harmonogramu. Pokud jsou zÃ¡kaznÃ­ci
a/nebo management seznÃ¡meni s pojmem technickÃ½ dluh, mohou lÃ©pe
zhodnotit jakÃ¡ jsou jeho rizika. Potom mohou rozhodnout, zda riziko
podstoupit Äi&amp;nbsp;nikoliv.&lt;/p&gt;
&lt;p&gt;Pokud zÃ¡kaznÃ­ci a management rozumÃ­ tomuto pojmu, budou takÃ© spÃ­Å¡e
naklonÄnÃ­ vynaloÅ¾enÃ­ prostÅedkÅ¯ na jeho odstranÄnÃ­ (i kdyÅ¾ pro nÄ
tato Äinnost nepÅinÃ¡Å¡Ã­ Å¾Ã¡dnÃ½ pÅÃ­mÃ½&amp;nbsp;zisk).&lt;/p&gt;
&lt;h2&gt;ZajÃ­mavÃ¡&amp;nbsp;literatura&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pragprog.com/book/atevol/software-design-x-rays"&gt;Software Design
X-Rays&lt;/a&gt; je
kniha, kterÃ¡ se zabÃ½vÃ¡ identifikacÃ­ technickÃ©ho dluhu pomocÃ­
analÃ½zy toho, jak vÃ½vojÃ¡Åi&amp;nbsp;pracujÃ­.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.managingsoftwaredebt.com/"&gt;Managing Software Debt&lt;/a&gt; se
snaÅ¾Ã­ o definitivnÃ­ popis problematiky technickÃ©ho&amp;nbsp;dluhu.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ieeexplore.ieee.org/document/6280547/"&gt;A Balancing Act: What Software Practitioners Have to Say about
Technical Debt&lt;/a&gt; je studie
zabÃ½vajÃ­cÃ­ se technickÃ½m dluhem, kterÃ¡ byla vypracovÃ¡na z interview s
odbornÃ­ky z&amp;nbsp;praxe.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.designsmells.com/"&gt;Refactoring for software design smells: managing technical
debt&lt;/a&gt; obsahuje popis 25 &amp;#8220;code smells&amp;#8221; a
zpÅ¯soby jak je refaktorovat za ÃºÄelem snÃ­Å¾enÃ­ technickÃ©ho&amp;nbsp;dluhu.&lt;/p&gt;</content><category term="CZ"></category></entry><entry><title>Python Pip âfreeze, editables andÂ git</title><link href="https://luminar.dev/notes/18-11-python-pip-freeze-editables-and-git/" rel="alternate"></link><published>2018-11-16T07:55:12+01:00</published><updated>2018-11-16T07:55:12+01:00</updated><author><name>max</name></author><id>tag:luminar.dev,2018-11-16:/notes/18-11-python-pip-freeze-editables-and-git/</id><summary type="html">&lt;p&gt;Interesting behaviour when using Pip &amp;#8212;freeze on a locally installed package with .git&amp;nbsp;directory.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When developing a Python package, the recommended practice is to install your package in editable mode. This way you can still edit your source code and run your tests on installed version of your package, without having reinstalling it each&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Usually, your project structure will be something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;My_project/&lt;/span&gt;
&lt;span class="err"&gt;|-- .git&lt;/span&gt;
&lt;span class="err"&gt;|-- my_project/&lt;/span&gt;
&lt;span class="err"&gt;|   |-- __init__.py&lt;/span&gt;
&lt;span class="err"&gt;|   |-- module.py&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;
&lt;span class="err"&gt;|-- setup.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can run &lt;code&gt;pip install -e .&lt;/code&gt; in the top level directory to install your package&amp;nbsp;locally.&lt;/p&gt;
&lt;p&gt;After that, an interesting thing happens if you do a &lt;code&gt;pip freeze&lt;/code&gt;. If there is a  &lt;code&gt;.git&lt;/code&gt; directory (or a directory for other &lt;span class="caps"&gt;VCS&lt;/span&gt;), your package will be listed as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="mo"&gt;@07&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;d2ae797515c740a1742fc77bdcd68e577cbe5&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I.e. it will point to the repository of your project instead of just naming your package. I could not find a mention of this anywhere in the documentation and it surprised me at&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;Note: If there is not remote specified for your repository it will fallback to the package name and insert a comment in the&amp;nbsp;output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;## !! Could not determine repository location&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category><category term="python"></category><category term="git"></category></entry><entry><title>Python - colorized text inÂ terminal</title><link href="https://luminar.dev/notes/16-06-python-colorized-text-in-terminal/" rel="alternate"></link><published>2016-06-27T15:17:58+02:00</published><updated>2016-06-27T15:17:58+02:00</updated><author><name>max</name></author><id>tag:luminar.dev,2016-06-27:/notes/16-06-python-colorized-text-in-terminal/</id><summary type="html">&lt;p&gt;This snippet is useful if you want to make your terminal output&amp;nbsp;colorized.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This snippet is useful if you want to make your terminal output
colorized. It should work on Unix and Windows with
&lt;a href="https://support.microsoft.com/cs-cz/kb/101875"&gt;&lt;span class="caps"&gt;ANSI&lt;/span&gt;.&lt;span class="caps"&gt;SYS&lt;/span&gt;&lt;/a&gt;&amp;nbsp;enabled.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Text mode&lt;/span&gt;
    &lt;span class="n"&gt;ENDC&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;BOLD&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;UNDERLINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[4m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;INVERSE&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[7m&amp;#39;&lt;/span&gt;

    &lt;span class="c1"&gt;# Colors&lt;/span&gt;
    &lt;span class="n"&gt;ORANGE&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[93m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;BLACK&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;30m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;BLUE&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;34m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;GREEN&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;32m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;CYAN&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;36m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;RED&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;31m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;PURPLE&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;35m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;BROWN&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;33m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;LGRAY&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;37m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;DGRAY&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;30m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;LBLUE&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;34m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;LGREEN&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;32m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;LCYAN&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;36m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;LRED&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;31m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;LPURPLE&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;35m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;YELLOW&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;33m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;WHITE&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;37m&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can combine colors and text modes, for example, this command will
print red, underlined&amp;nbsp;text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UNDERLINE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ENDC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: Do not forget to add &lt;code&gt;colors.ENDC&lt;/code&gt; at the end, otherwise the
rest of the output will be&amp;nbsp;colorized.&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="terminal"></category></entry></feed>