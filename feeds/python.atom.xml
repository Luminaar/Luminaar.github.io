<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Max K. Luminar - Python</title><link href="https://luminar.dev/" rel="alternate"></link><link href="https://luminar.dev/feeds/python.atom.xml" rel="self"></link><id>https://luminar.dev/</id><updated>2020-01-09T13:32:47+01:00</updated><entry><title>PythonÂ tooling</title><link href="https://luminar.dev/notes/20-01-python-tooling/" rel="alternate"></link><published>2020-01-09T13:32:47+01:00</published><updated>2020-01-09T13:32:47+01:00</updated><author><name>max</name></author><id>tag:luminar.dev,2020-01-09:/notes/20-01-python-tooling/</id><summary type="html">&lt;p&gt;Overview of development tools for Python - linters, formatters and other. Short description of how we are using some of these tools in&amp;nbsp;production.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This post started as a talk for the Python Guild (a monthly gathering of Python
developers at Avast). I decided to research and put together a summary of
different tools related to Python development. Turns out there are not that&amp;nbsp;many.&lt;/p&gt;
&lt;p&gt;After I gave the talk there was a short discussion and a couple of interesting
ideas were&amp;nbsp;proposed.&lt;/p&gt;
&lt;p&gt;I realized that a more interesting topic would be how to use all these tools in
everyday work. That&amp;#8217;s why I decided to expand this post a bit. First section
contains a list of tools categorized in different categories. In the second
section I will put some thoughts on how these tools can be used in different&amp;nbsp;scenarios.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;The&amp;nbsp;tools&lt;/h1&gt;
&lt;p&gt;When I started doing research for this post I expected it to be a much more
complicated topic (same as packaging for example). Turns out there are not that
many tools - there is almost only one way to do&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;I this section I will categorize different tools into five categories, describe and
compare them. I know a lot more about tools that I use everyday but I&amp;#8217;ve
experimented with most of the others&amp;nbsp;too.&lt;/p&gt;
&lt;h2&gt;Formatters&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;&lt;span class="caps"&gt;PEP8&lt;/span&gt;&lt;/a&gt; (Style guide for Python code)
and &lt;a href="https://www.python.org/dev/peps/pep-0257/"&gt;&lt;span class="caps"&gt;PEP257&lt;/span&gt;&lt;/a&gt; (Docstring conventions)
are two PEPs that describe how Python code should look. The &lt;span class="caps"&gt;PEP8&lt;/span&gt; is not meant to
be dogmatic and adhering to it is not the only necessary prerequisite for good
Python code, but it is a start. Because formatting code by hand is tedious,
using some kind of formatter is almost a&amp;nbsp;necessity.&lt;/p&gt;
&lt;p&gt;When working in a team, it&amp;#8217;s is better when everyones code looks the same.
Ideally it shouldn&amp;#8217;t be obvious who wrote the code from just looking at it. If
everyone is using the same formatter, there will not be any &amp;#8220;stylistic&amp;#8221; comments
in code review and no unnecessary diffs if two people work on the same&amp;nbsp;module.&lt;/p&gt;
&lt;p&gt;There are several code formatters for Python&amp;nbsp;code:&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The Uncompromising Code&amp;nbsp;Formatter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Black is similar to &lt;code&gt;gofmt&lt;/code&gt; - there is almost no configuration (line length is
pretty much the only thing you can configure and even that is discouraged). This
is a good thing because you don&amp;#8217;t have to synchronize configuration across
developers in the&amp;nbsp;team.&lt;/p&gt;
&lt;p&gt;When formatting it makes sure that the &lt;span class="caps"&gt;AST&lt;/span&gt; of the code did not change (it will
not break your&amp;nbsp;code).&lt;/p&gt;
&lt;p&gt;In my experiments it worked pretty well with &lt;code&gt;pycodestyle&lt;/code&gt; (see Linters)
although you may have to disable some&amp;nbsp;checks.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no need to keep config files in sync between&amp;nbsp;developers&lt;/li&gt;
&lt;li&gt;run on save and never think about formatting&amp;nbsp;again&lt;/li&gt;
&lt;li&gt;no need to run style&amp;nbsp;checkers&lt;/li&gt;
&lt;li&gt;supported/owned by Python Software&amp;nbsp;Foundation&lt;/li&gt;
&lt;li&gt;good support in IDEs (can be enabled in VSCode, has plugin in&amp;nbsp;PyCharm)&lt;/li&gt;
&lt;li&gt;is actively&amp;nbsp;developed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a bit unusual line length by default (88&amp;nbsp;characters)&lt;/li&gt;
&lt;li&gt;in tiny amount of cases the formatting could be nicer (it still makes
    sense, but I would do in&amp;nbsp;differently)&lt;/li&gt;
&lt;li&gt;is a new project and formatting can sometimes change between&amp;nbsp;versions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/google/yapf"&gt;&lt;span class="caps"&gt;YAPF&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="caps"&gt;YAPF&lt;/span&gt; is developed by Google and takes a similar approach to &lt;code&gt;black&lt;/code&gt; and &lt;code&gt;gofmt&lt;/code&gt;
but has much more configuration&amp;nbsp;options.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;good support in IDEs (can be enabled in VSCode, has plugin in&amp;nbsp;PyCharm)&lt;/li&gt;
&lt;li&gt;very configurable (if that&amp;#8217;s what you&amp;nbsp;need)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is developed but still considered Alpha (since&amp;nbsp;2015)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/hhatto/autopep8"&gt;autopep8&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Autopep8 fixes errors returned by &lt;code&gt;pycodestyle&lt;/code&gt;. It can be configured to ignore
certain&amp;nbsp;errors.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/timothycrosley/isort"&gt;isort&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another aspect of code formatting is import sorting. Isort will split imports in
a module into types (builtin, local, third party) and sort them&amp;nbsp;alphabetically.&lt;/p&gt;
&lt;p&gt;Pros:
- does its&amp;nbsp;job&lt;/p&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;needs a bit of configuration to work well with Black (see &lt;a href="https://github.com/timothycrosley/isort/issues/694#issuecomment-564261886"&gt;this
issue&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;sometimes changes its mind (depending on active environemnt and available
packages) and causes&amp;nbsp;diffs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Linters&lt;/h2&gt;
&lt;p&gt;Linters are tools that analyze your code and report&amp;nbsp;problems.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://pycodestyle.readthedocs.io/"&gt;pycodestyle&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Check if the code conforms to &lt;span class="caps"&gt;PEP8&lt;/span&gt; standard. Is used by &lt;code&gt;autopep8&lt;/code&gt; to find
errors but can be used also with &lt;code&gt;black&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/PyCQA/pyflakes"&gt;pyflakes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Analyzes syntax tree of modules and looks for various errors. It does not check
for stylistic&amp;nbsp;errors.&lt;/p&gt;
&lt;p&gt;It is fast but the checks it can do are more limited. Is is also
not as configurable. It is a good choice for if you need a linter to run in your&amp;nbsp;editor.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/PyCQA/pylint"&gt;pylint&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From&amp;nbsp;Readme:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Static code analysis tool that looks for programming
errors, helps enforcing a coding standard, finds code smells and suggests&amp;nbsp;refactorings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is very configurable, has &lt;strong&gt;a lot&lt;/strong&gt; of checkers (modules that check certain
things). It also has extensive documentation with &lt;span class="caps"&gt;HOW&lt;/span&gt;-TOs, tutorials and
technical&amp;nbsp;reference.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;powerful&lt;/li&gt;
&lt;li&gt;configurable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slooow for large projects or on slow&amp;nbsp;machines&lt;/li&gt;
&lt;li&gt;too noisy with default settings (best is to disable everything first, then
   enable only what you need). Here is an &lt;a href="https://github.com/datawire/quark/blob/master/.pylintrc"&gt;example&amp;nbsp;config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Static&amp;nbsp;type-checkers&lt;/h2&gt;
&lt;p&gt;Python has type annotation syntax since version &lt;a href="https://www.python.org/dev/peps/pep-3107/"&gt;3.0&lt;/a&gt;
and support for type hints since version 3.5 in
&lt;a href="https://docs.python.org/3.5/library/typing.html#module-typing"&gt;typing&lt;/a&gt; library.
Type annotation are not mandatory (&lt;a href="https://www.python.org/dev/peps/pep-0484/#non-goals"&gt;and never will be&lt;/a&gt;)
and any type checking is left to third party&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;Here are some of the more well-known tools for static type&amp;nbsp;checking:&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://mypy.readthedocs.io/"&gt;mypy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This one feels more &amp;#8220;official&amp;#8221; because Guido is involved in it&amp;#8217;s development and
it lives in &amp;#8220;python&amp;#8221; Github&amp;nbsp;organization.&lt;/p&gt;
&lt;p&gt;It can give you some benefits even with no type annotations in your code. It is
not bulletproof and sometimes needs help but it does catch&amp;nbsp;errors.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://pyre-check.org/"&gt;pyre&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pyre is developed by Facebook but I have not tried&amp;nbsp;it.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/microsoft/pyright"&gt;pyright&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pyright is developed by Microsoft but its Readme&amp;nbsp;states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pyright is a side project with no dedicated team. There is
no guarantee of continued development on the project. If you find it useful,
feel free to use it and contribute to the code&amp;nbsp;base.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Other&amp;nbsp;tools&lt;/h2&gt;
&lt;p&gt;Here are some tools that don&amp;#8217;t belong in any of the categories. Although
interesting, most of these tools are not well known or very&amp;nbsp;mature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/davidhalter/jedi"&gt;jedi&lt;/a&gt; - autocompletion and static
analysis library&lt;ul&gt;
&lt;li&gt;can be integrated with many different editors (Vim, Emacs, Sublime,&amp;nbsp;VSCode,&amp;#8230;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python-rope/rope"&gt;rope&lt;/a&gt; - renaming/refactoring&lt;ul&gt;
&lt;li&gt;only partial Python3&amp;nbsp;support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jendrikseipp/vulture"&gt;Vulture&lt;/a&gt; - finds unused&amp;nbsp;code&lt;/li&gt;
&lt;li&gt;mccabe - code complexity&amp;nbsp;measure&lt;/li&gt;
&lt;li&gt;dodgy - looks for things that  should not be in the code&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;SCM&lt;/span&gt; diff checkings, passwords, secret keys,&amp;nbsp;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bandit.readthedocs.io/"&gt;bandit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;looks for security issues by applying a predefined set of&amp;nbsp;tests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/myint/eradicate"&gt;eradicate&lt;/a&gt; - removes commented-out&amp;nbsp;code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tool&amp;nbsp;bundles&lt;/h2&gt;
&lt;p&gt;There are a couple of projects that bundle several tools&amp;nbsp;togehter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/prospector"&gt;prospector&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Pylint, pyflakes, pycodestyle, mccabe, dodgy and some others by&amp;nbsp;default&lt;/li&gt;
&lt;li&gt;also supports Vulture and&amp;nbsp;mypy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://flake8.pycqa.org/en/latest/"&gt;Flake8&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;PyFlakes, pycodestale,&amp;nbsp;mccabe&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pylama.readthedocs.io/"&gt;pylama&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;pycodestyle, pydocstyle, pyflakes, mccabe, pylint and some other&amp;nbsp;tools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;IDEs&lt;/h2&gt;
&lt;p&gt;All mentioned tools can be used by themselves from command-line or &lt;span class="caps"&gt;CI&lt;/span&gt;/&lt;span class="caps"&gt;CD&lt;/span&gt; (see
below), but mostly we want to have them run in real time while we are writing
code. We are not cave-people banging rocks together - everyone should use some
kind of &lt;span class="caps"&gt;IDE&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;PyCharm&lt;/h3&gt;
&lt;p&gt;PyCharm has its own language server that implements intellisense, refactoring,
linting, import sorting etc. But it has support for &amp;#8220;external tools&amp;#8221; that will
be run from inside the &lt;span class="caps"&gt;IDE&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Visual Studio&amp;nbsp;Code&lt;/h3&gt;
&lt;p&gt;VSCode has great &lt;a href="https://code.visualstudio.com/docs/python/python-tutorial"&gt;support for Python&lt;/a&gt;.
It also has its own language server, but it integrates external tools for
different&amp;nbsp;tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Formatting&lt;ul&gt;
&lt;li&gt;&lt;code&gt;autopep8&lt;/code&gt; is enabled by default, but &lt;code&gt;black&lt;/code&gt; can be enabled in&amp;nbsp;settings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isort&lt;/code&gt; is used by default for import&amp;nbsp;sorting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pylint&lt;/code&gt; is enabled by default but other linters can be used enabled:&lt;ul&gt;
&lt;li&gt;Flake8&lt;/li&gt;
&lt;li&gt;mypy&lt;/li&gt;
&lt;li&gt;pycodestyle&lt;/li&gt;
&lt;li&gt;prospector&lt;/li&gt;
&lt;li&gt;pylama&lt;/li&gt;
&lt;li&gt;bandit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;(Neo)vim&lt;/h3&gt;
&lt;p&gt;Vim is not an &lt;span class="caps"&gt;IDE&lt;/span&gt;, but it can be setup for Python development pretty well.
Here are &lt;a href="https://medium.com/@hanspinckaers/setting-up-vim-as-an-ide-for-python-773722142d1d"&gt;some&lt;/a&gt;
&lt;a href="https://github.com/rapphil/vim-python-ide/"&gt;resources&lt;/a&gt; on how to do that.
&lt;a href="https://github.com/Luminaar/dotfiles/blob/master/nvim/init.vim"&gt;Here&lt;/a&gt; is my&amp;nbsp;setup.&lt;/p&gt;
&lt;p&gt;It is a lot of work but it can be done. I&amp;#8217;m using Vim for Python development
every day at&amp;nbsp;work.&lt;/p&gt;
&lt;h1&gt;Using Python&amp;nbsp;tools&lt;/h1&gt;
&lt;h2&gt;What are we&amp;nbsp;using?&lt;/h2&gt;
&lt;p&gt;Over time and after some discussion our team settled on following tools (by
settled I mean that most of us are using them and we recommend them to&amp;nbsp;newcomers):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;black&lt;/code&gt; for code&amp;nbsp;formatting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isort&lt;/code&gt; configured to work with&amp;nbsp;black&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pylint&lt;/code&gt; and &lt;code&gt;pycodestyle&lt;/code&gt; with configuration in our package definition (more
    on that&amp;nbsp;later)&lt;/li&gt;
&lt;li&gt;optionally &lt;code&gt;mypy&lt;/code&gt; (we are using type annotations in our&amp;nbsp;code)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is not completely clear is how to best &amp;#8220;enforce&amp;#8221; usage of those&amp;nbsp;tools.&lt;/p&gt;
&lt;h2&gt;How to use the&amp;nbsp;tools&lt;/h2&gt;
&lt;p&gt;There are two main&amp;nbsp;use-cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local&amp;nbsp;development&lt;/li&gt;
&lt;li&gt;centralized checks in &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I&amp;#8217;m writing code, I want it to be formatted (&lt;code&gt;black&lt;/code&gt;, &lt;code&gt;isort&lt;/code&gt;) and I want
my &lt;span class="caps"&gt;IDE&lt;/span&gt; to catch errors as I&amp;#8217;m making them (&lt;code&gt;pylint&lt;/code&gt;, language&amp;nbsp;server).&lt;/p&gt;
&lt;p&gt;After pushing my code, I want &lt;span class="caps"&gt;CI&lt;/span&gt; system to check that the code adheres to our
coding standard (so that reviewers don&amp;#8217;t need to waste time checking my
formatting) and check that there are no errors (run tests and static&amp;nbsp;analysis).&lt;/p&gt;
&lt;p&gt;I want the centralized checks to be handled for me so that I don&amp;#8217;t have to worry
about (or forget) setting them up with each new project. But I also would like
to be able run the same checks locally to catch any errors before I push my code
(so I don&amp;#8217;t have to wait for a build to&amp;nbsp;fail).&lt;/p&gt;
&lt;p&gt;So the requirements&amp;nbsp;are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;some tools integrated with the&amp;nbsp;editor&lt;/li&gt;
&lt;li&gt;centralized checks in &lt;span class="caps"&gt;CI&lt;/span&gt; that do not depend on developers remembering to set
    them&amp;nbsp;up&lt;/li&gt;
&lt;li&gt;ability to run the same checks&amp;nbsp;locally&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Tools integrated with the&amp;nbsp;editor&lt;/h3&gt;
&lt;p&gt;This is not something that we as a team can control directly. Everyone uses
different editors and environment. What we have done is agreeing on a common set
of tools which everyone should&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;We have a document called &lt;code&gt;Python Stack&lt;/code&gt; that contains this information. This
document is a kind of a decision log for us. It is also useful for beginners and
newcomers in our&amp;nbsp;team.&lt;/p&gt;
&lt;h3&gt;Centralized checks in &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;As a team we have decided what checks will be run in &lt;span class="caps"&gt;CI&lt;/span&gt; (Teamcity in our case)
and we are letting the system enforce it. Because each project in Teamcity is
created from a template, we don&amp;#8217;t need to worry about setting the checks up&amp;nbsp;ourselves.&lt;/p&gt;
&lt;p&gt;These checks require some configuration and with that comes a question of where
to put it. In our team we put all our code in Python packages that have a
&lt;code&gt;setup.cfg&lt;/code&gt; file. This file can be used to store configuration for &lt;code&gt;pylint&lt;/code&gt;,
&lt;code&gt;pycodestyle&lt;/code&gt; and many other&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;To make packaging more comfortable, we use &lt;a href="https://cookiecutter.readthedocs.io/"&gt;cookicutter
templates&lt;/a&gt;. That way configuration is the
same for all projects but can be customized if needed. Checks in Teamcity then
rely on this configuration. This is a compromise between centralized control and
freedom to customize&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;Here is an example of a package configuration (from my &lt;a href="https://github.com/Luminaar/k8secret"&gt;personal
project&lt;/a&gt; but it is based on what we use in&amp;nbsp;production).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setup.py&lt;/code&gt; looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and &lt;code&gt;setup.cfg&lt;/code&gt; file looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;[options]&lt;/span&gt;

&lt;span class="na"&gt;setup_requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    pytest-runner &amp;gt;= 5.0, &amp;lt;6.0&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="na"&gt;tests_require&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    pytest &amp;gt;=5.0, &amp;lt;6.0&lt;/span&gt;
&lt;span class="s"&gt;    pytest-cov &amp;gt;=2.8.1, &amp;lt;3.0&lt;/span&gt;
&lt;span class="s"&gt;    pytest-pylint &amp;gt;=0.14.1, &amp;lt;1.0&lt;/span&gt;
&lt;span class="s"&gt;    pytest-pycodestyle &amp;gt;=2.0.0, &amp;lt;3.0&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;[aliases]&lt;/span&gt;
&lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;pytest&lt;/span&gt;

&lt;span class="k"&gt;[tool:pytest]&lt;/span&gt;
&lt;span class="na"&gt;addopts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;--verbose --pylint --pylint-rcfile=setup.cfg --cov=k8secrets --cov-report html --pycodestyle&lt;/span&gt;

&lt;span class="k"&gt;[pycodestyle]&lt;/span&gt;
&lt;span class="c1"&gt;# Black tries to enforce 88 characters but will leave&lt;/span&gt;
&lt;span class="c1"&gt;# long strings unchanged. We leave some room for that&lt;/span&gt;
&lt;span class="na"&gt;max-line-length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;120&lt;/span&gt;
&lt;span class="na"&gt;ignore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;E4,E7,W3&lt;/span&gt;

&lt;span class="c1"&gt;# Configuration for pylint&lt;/span&gt;
&lt;span class="k"&gt;[MASTER]&lt;/span&gt;
&lt;span class="na"&gt;ignore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;CVS&lt;/span&gt;
&lt;span class="na"&gt;good-names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;logger,e,i,j,n,m,f,_&lt;/span&gt;

&lt;span class="k"&gt;[MESSAGES CONTROL]&lt;/span&gt;
&lt;span class="na"&gt;disable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;all&lt;/span&gt;
&lt;span class="na"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;unused-import,&lt;/span&gt;
&lt;span class="s"&gt;       fixme,&lt;/span&gt;
&lt;span class="s"&gt;       useless-object-inheritance,&lt;/span&gt;
&lt;span class="s"&gt;       unused-variable,&lt;/span&gt;
&lt;span class="s"&gt;       unused-argument,&lt;/span&gt;
&lt;span class="s"&gt;       unexpected-keyword-arg,&lt;/span&gt;
&lt;span class="s"&gt;       string,&lt;/span&gt;
&lt;span class="s"&gt;       unreachable,&lt;/span&gt;
&lt;span class="s"&gt;       invalid-name,&lt;/span&gt;
&lt;span class="s"&gt;       logging-not-lazy,&lt;/span&gt;
&lt;span class="s"&gt;       unnecesary-pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Running &lt;span class="caps"&gt;CI&lt;/span&gt; checks&amp;nbsp;locally&lt;/h3&gt;
&lt;p&gt;If you look at the package configuration you will see a lot of different
&lt;code&gt;pytest&lt;/code&gt; related&amp;nbsp;dependencies.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pytest-runner&lt;/code&gt; allows us to run tests with &lt;code&gt;setuptools&lt;/code&gt; like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python setup.py test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will install the package and its dependencies and run tests. This is done
independently in its own&amp;nbsp;environment.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pytest-cov&lt;/code&gt;, &lt;code&gt;pytest-pylint&lt;/code&gt; and &lt;code&gt;pytest-pycodestyle&lt;/code&gt; are plugins that run code
coverage, pylint and pycodestyle respectively, together with&amp;nbsp;tests.&lt;/p&gt;
&lt;p&gt;This works both locally and in Teamcity, so you can run &lt;span class="caps"&gt;CI&lt;/span&gt; checks before pushing
your code. One option is to add a pre-commit hook to the Git repository that
will not allow commiting code that did not pass the checks. This is up to each
developer and needs to be done for each project. There are some tools that help
with this, such as &lt;a href="https://pre-commit.com/"&gt;pre-commit.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One issue with setup that I personally have is, that I always run my tests with
setuptools (&lt;code&gt;python setup.py test&lt;/code&gt;) and that runs both tests and linters
every time. I haven&amp;#8217;t found a good solution yet. For now I just turn off the
linters temporarily (I run linters with the same settings right in my editor).
This is of course not ideal, because I can easily forget to turn the linters back
on and they will not run in &lt;span class="caps"&gt;CI&lt;/span&gt;.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;There really isn&amp;#8217;t one. I&amp;#8217;ve described some tools and hove we use some of them
in our team. There is still a lot that can be improved and that will happen
incrementally over time. For now, we are happy with how everything&amp;nbsp;works.&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>Python - what is new in whichÂ version?</title><link href="https://luminar.dev/notes/19-06-python-what-is-new-in-which-version/" rel="alternate"></link><published>2019-06-10T15:17:58+02:00</published><updated>2019-06-10T15:17:58+02:00</updated><author><name>max</name></author><id>tag:luminar.dev,2019-06-10:/notes/19-06-python-what-is-new-in-which-version/</id><summary type="html">&lt;p&gt;A summary of new features and improvements in Python versions from 3.5 to&amp;nbsp;3.8&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post I would like to summarize which features can be used in which
Python3 versions. I only choose features and changes that are relevant or
interesting to me. There is a link to &amp;#8220;What&amp;#8217;s new&amp;#8221; page for each version where
you can find the full&amp;nbsp;list.&lt;/p&gt;
&lt;h2&gt;Python&amp;nbsp;3.5&lt;/h2&gt;
&lt;p&gt;Released in September 2015. Comes pre-installed on Debian 9 (Stretch) and Ubuntu
16.04. Complete list of changes is &lt;a href="https://docs.python.org/3.5/whatsnew/3.5.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;New&amp;nbsp;syntax&lt;/h3&gt;
&lt;p&gt;Coroutines can now be defined with &lt;code&gt;async&lt;/code&gt; keyword and awaited with &lt;code&gt;await&lt;/code&gt;
keyword. These keywords are not reserved yet. They will be
become proper reserved keywords in Python&amp;nbsp;3.7.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;async&lt;/code&gt; can also be used in &lt;a href="https://docs.python.org/3.5/reference/compound_stmts.html#async-for"&gt;async for&lt;/a&gt;
and &lt;a href="https://docs.python.org/3.5/reference/compound_stmts.html#async-with"&gt;async with&lt;/a&gt;
statements for asynchronous &lt;code&gt;for&lt;/code&gt; loops and context&amp;nbsp;managers.&lt;/p&gt;
&lt;h3&gt;New library&amp;nbsp;modules&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.5/library/typing.html#module-typing"&gt;typing&lt;/a&gt; module adds support for Type Hints (&lt;a href="https://www.python.org/dev/peps/pep-0484/"&gt;&lt;span class="caps"&gt;PEP484&lt;/span&gt;&lt;/a&gt;).
While syntax for function annotation was introduced back in Python3.0 (&lt;a href="https://www.python.org/dev/peps/pep-3107/"&gt;&lt;span class="caps"&gt;PEP3107&lt;/span&gt;&lt;/a&gt;),
this module provides some standard tools (such as types Any, Union, Tuple,
Callable, etc.) that can be used in type&amp;nbsp;annotations.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.5/library/zipapp.html#module-zipapp"&gt;zipapp&lt;/a&gt; provides
tools to manage the creation of zip files containing Python code, which can be
executed directly by the Python&amp;nbsp;interpreter.&lt;/p&gt;
&lt;h3&gt;Improvements in&amp;nbsp;stdlib&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.5/library/collections.html#collections.OrderedDict"&gt;collections.OrderedDict&lt;/a&gt;
is significantly faster&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;&lt;a href="s://docs.python.org/3.5/library/os.html#os.scandir"&gt;os.scandir()&lt;/a&gt; is a new
function for &lt;a href="https://docs.python.org/3.5/whatsnew/3.5.html#whatsnew-pep-471"&gt;better and faster way of directory
traversal&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Python&amp;nbsp;3.6&lt;/h2&gt;
&lt;p&gt;Released in December 2016. Comes pre-installed on Ubuntu 18.04. Complete list
of changes is &lt;a href="https://docs.python.org/3.8/whatsnew/3.6.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;New&amp;nbsp;syntax&lt;/h3&gt;
&lt;p&gt;Formatted string literals
(&lt;a href="https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings"&gt;f-strings&lt;/a&gt;).
Defined in &lt;a href="https://www.python.org/dev/peps/pep-0498/"&gt;&lt;span class="caps"&gt;PEP498&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Max&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, &lt;/span&gt;&lt;span class="si"&gt;{name}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Support for variable type hints
(&lt;a href="https://www.python.org/dev/peps/pep-0498/"&gt;&lt;span class="caps"&gt;PEP526&lt;/span&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Underscores in numeric literals: &lt;code&gt;1_000_000&lt;/code&gt;
(&lt;a href="https://www.python.org/dev/peps/pep-0515/"&gt;&lt;span class="caps"&gt;PEP515&lt;/span&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Asynchronous generators (&lt;a href="https://www.python.org/dev/peps/pep-0525/"&gt;&lt;span class="caps"&gt;PEP525&lt;/span&gt;&lt;/a&gt;)
and comprehensions (&lt;a href="https://www.python.org/dev/peps/pep-0530/"&gt;&lt;span class="caps"&gt;PEP530&lt;/span&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;New library&amp;nbsp;modules&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.8/library/secrets.html#module-secrets"&gt;secrets&lt;/a&gt; for
generating cryptographically strong random numbers suitable for managing data
such as passwords, account authentication, security tokens, and related secrets.
Described in &lt;a href="https://www.python.org/dev/peps/pep-0505/"&gt;&lt;span class="caps"&gt;PEP506&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Implementation&amp;nbsp;improvements&lt;/h3&gt;
&lt;p&gt;The new implementation of dictionaries is 20% to 25% more compact and preserves
insertion order (but this &lt;strong&gt;should not&lt;/strong&gt; be relied upon yet). See this great
&lt;a href="https://www.youtube.com/watch?v=p33CVV29OG8"&gt;talk by Raymond Hettinger&lt;/a&gt; in which he explains how dictionaries changed over&amp;nbsp;time.&lt;/p&gt;
&lt;h3&gt;Improvements in&amp;nbsp;stdlib&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.8/library/asyncio.html#module-asyncio"&gt;asyncio&lt;/a&gt; is no
longer provisional and the &lt;span class="caps"&gt;API&lt;/span&gt; is considered&amp;nbsp;stable.&lt;/p&gt;
&lt;p&gt;A new &lt;a href="https://docs.python.org/3.8/whatsnew/3.6.html#whatsnew36-pep519"&gt;file system path
protocol&lt;/a&gt; was added
to support &lt;a href="https://docs.python.org/3.8/glossary.html#term-path-like-object"&gt;path-like object&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://docs.python.org/3.8/library/datetime.html#module-datetime"&gt;datetime&lt;/a&gt;
module has gained support for &lt;a href="https://docs.python.org/3.8/whatsnew/3.6.html#whatsnew36-pep495"&gt;Local Time Disambiguation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json.load()&lt;/code&gt; and &lt;code&gt;json.loads()&lt;/code&gt; now support binary&amp;nbsp;input.&lt;/p&gt;
&lt;p&gt;A new function &lt;a href="https://docs.python.org/3.8/library/random.html#random.choices"&gt;random.choices()&lt;/a&gt;
returns a list of specified size with elements from a population with
optional&amp;nbsp;weights.&lt;/p&gt;
&lt;p&gt;Class &lt;code&gt;unittest.mock.Mock&lt;/code&gt; has new methods &lt;code&gt;assert_called&lt;/code&gt; and
&lt;code&gt;assert_called_once&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Python&amp;nbsp;3.7&lt;/h2&gt;
&lt;p&gt;Released in June 2018. Comes pre-installed on Debian 10 (Buster) and  Ubuntu
18.04 and 19.04. Complete list of changes is &lt;a href="https://docs.python.org/3.8/whatsnew/3.7.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;New syntax&amp;nbsp;features&lt;/h3&gt;
&lt;p&gt;Postponed evaluation of type annotations (&lt;a href="https://www.python.org/dev/peps/pep-0526/"&gt;&lt;span class="caps"&gt;PEP526&lt;/span&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Annotations can now support forward&amp;nbsp;references&lt;/li&gt;
&lt;li&gt;Annotations are cheaper and faster to&amp;nbsp;store&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; are now reserved&amp;nbsp;keywords.&lt;/p&gt;
&lt;h3&gt;New library&amp;nbsp;modules&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.8/library/dataclasses.html#module-dataclasses"&gt;dataclasses&lt;/a&gt;
provides a decorator and functions for automatically adding generated special
methods such as &lt;code&gt;__init__()&lt;/code&gt; and &lt;code&gt;__repr__()&lt;/code&gt; to user-defined classes. It is useful
when you need to create a simple class that only holds data but has no&amp;nbsp;behavior.&lt;/p&gt;
&lt;h3&gt;New built-in&amp;nbsp;features&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.8/library/functions.html#breakpoint"&gt;breakpoint()&lt;/a&gt; function for&amp;nbsp;debuggers.&lt;/p&gt;
&lt;p&gt;Dictionaries now officially preserve insertion order of&amp;nbsp;elements.&lt;/p&gt;
&lt;h3&gt;Improvements in&amp;nbsp;stdlib&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.8/library/asyncio.html#module-asyncio"&gt;asyncio&lt;/a&gt;
received a lot of new features and improvements (high-level &lt;code&gt;asyncio.run()&lt;/code&gt;
function for running coroutines, many&amp;nbsp;others).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.8/library/time.html#module-time"&gt;time&lt;/a&gt; module now has support for &lt;a href="https://docs.python.org/3.8/whatsnew/3.7.html#whatsnew37-pep564"&gt;nanosecond resolution&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Deprecations&lt;/h3&gt;
&lt;p&gt;Debian 8, Ubuntu 16, CentOS 7.5 and other platforms that use OpenSSL 0.9.8 and
1.0.1 are no longer supported. At least OpenSSL 1.0.2 is required. You can build
Python3.7 on those platforms but you have to manually link a new OpenSSL&amp;nbsp;version.&lt;/p&gt;
&lt;h2&gt;Python&amp;nbsp;3.8&lt;/h2&gt;
&lt;p&gt;Will be released sometime in 2019. Will come pre-installed on Debian 9, Ubuntu
19.04. Complete list of changes is &lt;a href="https://docs.python.org/3.8/whatsnew/3.8.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;New&amp;nbsp;syntax&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0572/"&gt;Assignment expressions&lt;/a&gt; (the &amp;#8220;walrus operator&amp;#8221;, &lt;code&gt;:=&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;List is too long (&lt;/span&gt;&lt;span class="si"&gt;{n}&lt;/span&gt;&lt;span class="s2"&gt; elements, expected &amp;lt;= 10)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0570/"&gt;Positional only arguments&lt;/a&gt;: There is
new syntax (&lt;code&gt;/&lt;/code&gt;) to indicate that some function parameters must be specified&amp;nbsp;positionally.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is in addition to &lt;a href="https://www.python.org/dev/peps/pep-3102/"&gt;keyword only arguments&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Library&amp;nbsp;improvements&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;json.tool&lt;/code&gt; has a new option (&lt;code&gt;--json-lines&lt;/code&gt;) to parse every input line as
separate &lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;object.&lt;/p&gt;
&lt;p&gt;New class &lt;code&gt;unittest.mock.AsyncMock&lt;/code&gt; for asynchronous&amp;nbsp;mocking.&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="python3"></category></entry><entry><title>PythonÂ decorators</title><link href="https://luminar.dev/notes/19-04-python-decorators/" rel="alternate"></link><published>2019-04-23T18:00:00+02:00</published><updated>2019-04-23T18:00:00+02:00</updated><author><name>max</name></author><id>tag:luminar.dev,2019-04-23:/notes/19-04-python-decorators/</id><summary type="html">&lt;p&gt;What I wish I knew when I first tried to understand&amp;nbsp;decorators.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It took me quite a while to understand how decorators work in Python
and when are they useful. And even after I understood them, I still
had to look up how to do them properly (for example how to make a
decorator with&amp;nbsp;parameters).&lt;/p&gt;
&lt;p&gt;Then a I saw this paragraph in the &lt;a href="https://docs.python.org/3/reference/compound_stmts.html#function"&gt;official documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A function definition may be wrapped by one or more &lt;strong&gt;decorator
expressions&lt;/strong&gt;. Decorator &lt;strong&gt;expressions are evaluated when the
function is defined&lt;/strong&gt;, in the scope that contains the function
definition. &lt;strong&gt;The result must be a callable&lt;/strong&gt;, which is invoked &lt;strong&gt;with
the function object as the only argument&lt;/strong&gt;. The &lt;strong&gt;returned value is
bound to the function name instead of the function object&lt;/strong&gt;.
Multiple decorators are applied in nested&amp;nbsp;fashion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have not found any other explanation of decorators anywhere else in
the docs. Because there is nothing more to&amp;nbsp;explain!&lt;/p&gt;
&lt;p&gt;All you need to know is that your &lt;code&gt;@expression&lt;/code&gt; has to return a
callable which will be called with the wrapped function as an
argument, and result will be bound to the function name. And
that&amp;#8217;s&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;A simple decorator might look something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;funs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Stop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@logs&lt;/span&gt;  &lt;span class="c1"&gt;# Return the wrapper directly&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greeter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;{name}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Need to pass arguments to the&amp;nbsp;wrapper?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;repeated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;

    &lt;span class="nd"&gt;@repeated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Call `repeated` to get the wrapper&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The lesson is: read the documentation, it&amp;#8217;s all there. I know I&amp;nbsp;didn&amp;#8217;t&amp;#8230;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>Python Pip âfreeze, editables andÂ git</title><link href="https://luminar.dev/notes/18-11-python-pip-freeze-editables-and-git/" rel="alternate"></link><published>2018-11-16T07:55:12+01:00</published><updated>2018-11-16T07:55:12+01:00</updated><author><name>max</name></author><id>tag:luminar.dev,2018-11-16:/notes/18-11-python-pip-freeze-editables-and-git/</id><summary type="html">&lt;p&gt;Interesting behaviour when using Pip &amp;#8212;freeze on a locally installed package with .git&amp;nbsp;directory.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When developing a Python package, the recommended practice is to install your package in editable mode. This way you can still edit your source code and run your tests on installed version of your package, without having reinstalling it each&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Usually, your project structure will be something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;My_project/&lt;/span&gt;
&lt;span class="err"&gt;|-- .git&lt;/span&gt;
&lt;span class="err"&gt;|-- my_project/&lt;/span&gt;
&lt;span class="err"&gt;|   |-- __init__.py&lt;/span&gt;
&lt;span class="err"&gt;|   |-- module.py&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;
&lt;span class="err"&gt;|-- setup.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can run &lt;code&gt;pip install -e .&lt;/code&gt; in the top level directory to install your package&amp;nbsp;locally.&lt;/p&gt;
&lt;p&gt;After that, an interesting thing happens if you do a &lt;code&gt;pip freeze&lt;/code&gt;. If there is a  &lt;code&gt;.git&lt;/code&gt; directory (or a directory for other &lt;span class="caps"&gt;VCS&lt;/span&gt;), your package will be listed as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="mo"&gt;@07&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;d2ae797515c740a1742fc77bdcd68e577cbe5&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I.e. it will point to the repository of your project instead of just naming your package. I could not find a mention of this anywhere in the documentation and it surprised me at&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;Note: If there is not remote specified for your repository it will fallback to the package name and insert a comment in the&amp;nbsp;output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;## !! Could not determine repository location&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category><category term="python"></category><category term="git"></category></entry><entry><title>Python - colorized text inÂ terminal</title><link href="https://luminar.dev/notes/16-06-python-colorized-text-in-terminal/" rel="alternate"></link><published>2016-06-27T15:17:58+02:00</published><updated>2016-06-27T15:17:58+02:00</updated><author><name>max</name></author><id>tag:luminar.dev,2016-06-27:/notes/16-06-python-colorized-text-in-terminal/</id><summary type="html">&lt;p&gt;This snippet is useful if you want to make your terminal output&amp;nbsp;colorized.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This snippet is useful if you want to make your terminal output
colorized. It should work on Unix and Windows with
&lt;a href="https://support.microsoft.com/cs-cz/kb/101875"&gt;&lt;span class="caps"&gt;ANSI&lt;/span&gt;.&lt;span class="caps"&gt;SYS&lt;/span&gt;&lt;/a&gt;&amp;nbsp;enabled.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Text mode&lt;/span&gt;
    &lt;span class="n"&gt;ENDC&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;BOLD&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;UNDERLINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[4m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;INVERSE&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[7m&amp;#39;&lt;/span&gt;

    &lt;span class="c1"&gt;# Colors&lt;/span&gt;
    &lt;span class="n"&gt;ORANGE&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[93m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;BLACK&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;30m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;BLUE&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;34m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;GREEN&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;32m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;CYAN&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;36m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;RED&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;31m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;PURPLE&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;35m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;BROWN&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;33m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;LGRAY&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0;37m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;DGRAY&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;30m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;LBLUE&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;34m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;LGREEN&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;32m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;LCYAN&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;36m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;LRED&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;31m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;LPURPLE&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;35m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;YELLOW&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;33m&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;WHITE&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;37m&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can combine colors and text modes, for example, this command will
print red, underlined&amp;nbsp;text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UNDERLINE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ENDC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: Do not forget to add &lt;code&gt;colors.ENDC&lt;/code&gt; at the end, otherwise the
rest of the output will be&amp;nbsp;colorized.&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="terminal"></category></entry></feed>